{
	"info": {
		"_postman_id": "3a20f62f-1c75-432e-8e63-d738d4411a8e",
		"name": "maproulette2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "challenge",
			"item": [
				{
					"name": "Challenge Project Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleProjectID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SimpleProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing all children used for api testing.\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SimpleProject\",\n    \"description\":\"Test project containing all children used for api testing.\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a base project for all the other Map Roulette API Testing"
					},
					"response": []
				},
				{
					"name": "Challenge Project Creation 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a7e23c4-b5e4-4b5a-b23e-e96e3e28dfd4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleProjectID2\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SimpleProject2\";",
									"tests[\"description\"] = jsonData.description === \"Test project just to test moving challenges.\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SimpleProject2\",\n    \"description\":\"Test project just to test moving challenges.\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a base project for all the other Map Roulette API Testing"
					},
					"response": []
				},
				{
					"name": "Challenge Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleChallengeID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SimpleChallenge\";",
									"tests[\"description\"] = jsonData.description === \"A simple challenge containing only the basic elements for a challenge\";",
									"tests[\"instruction\"] = jsonData.instruction === \"Instruction for the simple challenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SimpleChallenge\",\n    \"description\":\"A simple challenge containing only the basic elements for a challenge\",\n    \"parent\":{{SimpleProjectID}},\n    \"instruction\":\"Instruction for the simple challenge\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						},
						"description": "Creates the most basic challenge with the least set of options in the body json"
					},
					"response": []
				},
				{
					"name": "Challenge Move",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72e60338-d2f3-4730-bb66-6fe7f513d03d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"parent\"] = jsonData.parent == postman.getGlobalVariable(\"SimpleProjectID2\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{SimpleChallengeID}}/project/{{SimpleProjectID2}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{SimpleChallengeID}}",
								"project",
								"{{SimpleProjectID2}}"
							]
						},
						"description": "Creates the most basic challenge with the least set of options in the body json"
					},
					"response": []
				},
				{
					"name": "Challenge Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{SimpleChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{SimpleChallengeID}}"
							]
						},
						"description": "Deletes the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Retrieved Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d62e91a2-16b7-4de4-958b-0b9d45522434",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"SimpleChallenge\";",
									"tests[\"deleted\"] = jsonData.deleted === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{SimpleChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{SimpleChallengeID}}"
							]
						},
						"description": "Deletes the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Immediate Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{SimpleChallengeID}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{SimpleChallengeID}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Tag Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03b0a82e-5f26-46f5-a28a-e3b1a7df8870",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"TagsChallengeID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"TagsChallenge\";",
									"tests[\"description\"] = jsonData.description === \"A simple challenge containing only the basic elements for a challenge and two tags\";",
									"tests[\"instruction\"] = jsonData.instruction === \"Instruction for the simple tag challenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"TagsChallenge\",\n    \"description\":\"A simple challenge containing only the basic elements for a challenge and two tags\",\n    \"parent\":{{SimpleProjectID}},\n    \"instruction\":\"Instruction for the simple tag challenge\",\n    \"enabled\":false,\n    \"tags\":\"tag1,tag2\",\n    \"children\": [\n        {\n            \"name\":\"Task 1\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]}\n        },\n        {\n            \"name\":\"Task 2\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103,1.5]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103.1,1.6]},\"properties\":{}}]}\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						},
						"description": "Creates the most basic challenge with the least set of options and a couple of tags in the body json"
					},
					"response": []
				},
				{
					"name": "Challenge Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"TagsChallenge\";",
									"tests[\"description\"] = jsonData.description === \"A simple challenge containing only the basic elements for a challenge and two tags\";",
									"tests[\"instruction\"] = jsonData.instruction === \"Instruction for the simple tag challenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}"
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "166ebb2c-eda3-4c07-9e30-71e275566ff5",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"Task1\"] = jsonData[0].name === \"Task 1\";",
									"postman.setGlobalVariable(\"TagsChallengeTask1ID\", jsonData[0].id);",
									"tests[\"Task2\"] = jsonData[1].name === \"Task 2\";",
									"postman.setGlobalVariable(\"TagsChallengeTask2ID\", jsonData[1].id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tasks"
							]
						},
						"description": "Gets the tasks of the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Random Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4c85630-833a-4df4-b2d8-ad83f3ecb26e",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"if (jsonData[0].name == \"Task 1\") {",
									"    var id = pm.globals.get(\"TagsChallengeTask1ID\");    ",
									"} else {",
									"    var id = pm.globals.get(\"TagsChallengeTask2ID\");",
									"}",
									"tests[\"IDValidation\"] = jsonData[0].id == id;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tasks/random",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tasks",
								"random"
							]
						},
						"description": "Gets the tasks of the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Next Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "040adc26-6e95-4944-b364-3aab59535897",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"Task 2\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/nextTask/{{TagsChallengeTask1ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"nextTask",
								"{{TagsChallengeTask1ID}}"
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Previous Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d92aa7b-b9d9-420a-a54b-789a87c04175",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"Task 1\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/previousTask/{{TagsChallengeTask2ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"previousTask",
								"{{TagsChallengeTask2ID}}"
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Tasks Batch Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b35c2674-41a0-4dea-b9e5-a46478edd678",
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\":\"Task 3\",\n        \"description\":\"Task 3 description\",\n        \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]}\n    },\n    {\n        \"name\":\"Task 4\",\n        \"description\":\"Task 4 description\",\n        \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[93,1.5]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[93.1,1.6]},\"properties\":{}}]}\n    }\n]"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tasks"
							]
						},
						"description": "Batch Upload two tasks to the challenge"
					},
					"response": []
				},
				{
					"name": "Challenge Tasks Take 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"Task1\"] = jsonData[0].name === \"Task 1\";",
									"tests[\"Task2\"] = jsonData[1].name === \"Task 2\";",
									"tests[\"Task3\"] = jsonData[2].name === \"Task 3\";",
									"tests[\"Task4\"] = jsonData[3].name === \"Task 4\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tasks"
							]
						},
						"description": "Gets the tasks of the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Nearby Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "040adc26-6e95-4944-b364-3aab59535897",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Task 2\");",
									"    pm.expect(pm.response.text()).to.include(\"Task 3\");",
									"    pm.expect(pm.response.text()).to.not.include(\"Task 4\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tasksNearby/{{TagsChallengeTask1ID}}?limit=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tasksNearby",
								"{{TagsChallengeTask1ID}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge GetTags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"tag1\"] = jsonData[0].name === \"tag1\"",
									"tests[\"tag2\"] = jsonData[1].name === \"tag2\""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tags"
							]
						},
						"description": "Gets the tags for a challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge DisassociateTags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tags?tags=tag1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tags"
							],
							"query": [
								{
									"key": "tags",
									"value": "tag1"
								}
							]
						},
						"description": "Disassociates the tags from the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge GetTags afterDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"tag1\"] = jsonData[0].name === \"tag2\""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tags"
							]
						},
						"description": "Gets the tags for a challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"TagsChallenge\";",
									"tests[\"description\"] = jsonData.description === \"Updated challenge description\";",
									"tests[\"instruction\"] = jsonData.instruction === \"Instruction for the simple tag challenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\":\"Updated challenge description\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}"
							]
						},
						"description": "Updates the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "TagChallenge Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the Tag challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Task Tag Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3afdd8b-3294-4a9a-ad99-11f3aac23b43",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"TagsTaskChallengeID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"TaskTagsChallenge\";",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"TaskTagsChallenge\",\n    \"description\":\"A simple challenge containing only the basic elements for a challenge and task tags\",\n    \"parent\":{{SimpleProjectID}},\n    \"instruction\":\"Instruction for the simple task tag challenge\",\n    \"enabled\":false,\n    \"children\": [\n        {\n            \"name\":\"Task 1\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]},\n            \"tags\":\"taskTag1,taskTag2\"\n        },\n        {\n            \"name\":\"Task 2\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103,1.5]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103.1,1.6]},\"properties\":{}}]},\n            \"tags\":\"taskTag3\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						},
						"description": "Creates the most basic challenge with the least set of options and a couple of tags in the body json"
					},
					"response": []
				},
				{
					"name": "Task Get Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a0d54a1-ab03-4b28-b86d-1f914e34f9d9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"tasktag1\");",
									"    pm.expect(pm.response.text()).to.include(\"tasktag2\");",
									"    pm.expect(pm.response.text()).to.include(\"tasktag3\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/keywords?tagType=tasks&limit=1000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"keywords"
							],
							"query": [
								{
									"key": "tagType",
									"value": "tasks"
								},
								{
									"key": "limit",
									"value": "1000"
								}
							]
						},
						"description": "Gets the tags for a challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Task Tag Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd8068af-6b11-4765-9798-9ca0e0e8acfa",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"status\"] = jsonData.status === \"OK\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsTaskChallengeID}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsTaskChallengeID}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the Tag challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Project Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project that was used for the challenge tests."
					},
					"response": []
				},
				{
					"name": "Challenge Project 2 Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID2}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID2}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project that was used for the challenge tests."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "task",
			"item": [
				{
					"name": "Setup Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"TestProject\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"TestProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project.\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"TestProject\",\n    \"description\":\"Test project.\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Setup Challenge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efbb42af-bda5-4229-bf7d-49e8e5d44038",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"TestChallenge\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"TestChallenge\";",
									"tests[\"description\"] = jsonData.description === \"TestChallenge description\";",
									"tests[\"instruction\"] = jsonData.instruction === \"TestChallenge instruction\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"TestChallenge\",\n    \"parent\": {{TestProject}},\n    \"description\":\"TestChallenge description\",\n    \"instruction\":\"TestChallenge instruction\",\n    \"children\":[\n        {\n            \"name\":\"Task 1\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test1\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]}\n        },\n        {\n            \"name\":\"Task 2\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103,1.5]},\"properties\":{\"id\": \"test2\", \"version\": 1}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103.1,1.6]},\"properties\":{}}]}\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Tasks in Bounding Box",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "040adc26-6e95-4944-b364-3aab59535897",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Task 1\");",
									"    pm.expect(pm.response.text()).to.include(\"Task 2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"taskPropertySearch\": {\n\t\t\"operationType\": \"or\",\n\t\t\"left\": {\n\t\t\t\"key\": \"id\",\n\t\t\t\"value\": \"test1\",\n\t\t\t\"valueType\": \"string\",\n\t\t\t\"searchType\": \"equals\"\n\t\t},\n\t\t\"right\": {\n\t\t\t\"operationType\": \"and\",\n\t\t\t\"left\": {\n\t\t\t\t\"key\": \"id\",\n\t\t\t\t\"value\": \"test2\",\n\t\t\t\t\"valueType\": \"string\",\n\t\t\t\t\"searchType\": \"contains\"\n\t\t\t},\n\t\t\t\"right\": {\n\t\t\t\t\"key\": \"version\",\n\t\t\t\t\"value\": \"0\",\n\t\t\t\t\"valueType\": \"number\",\n\t\t\t\t\"searchType\": \"greater_than\"\n\t\t\t}\n\t\t}\n\t}\n}\n"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/tasks/box/-180/-90/180/90?cid={{TestChallenge}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"tasks",
								"box",
								"-180",
								"-90",
								"180",
								"90"
							],
							"query": [
								{
									"key": "cid",
									"value": "{{TestChallenge}}"
								}
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Delete All Task Challenges",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccbb60bf-2a2d-45b7-8ee1-e472b52afce2",
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TestChallenge}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TestChallenge}}",
								"tasks"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Check Tasks Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34086a73-0c30-41d9-9f3c-308e35e15579",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TestChallenge}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TestChallenge}}",
								"tasks"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Create new Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"NewTask\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"NewTask\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"NewTask\",\n    \"parent\": {{TestChallenge}},\n    \"instruction\":\"NewTask instruction\",\n    \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{ \"identifier\":{\"value\":1111} }}]}\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Read Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Start Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction UPDATE\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instruction\":\"NewTask instruction UPDATE\",\n    \"tags\": \"newupdatetasktag\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Refresh Task Lock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction UPDATE\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instruction\":\"NewTask instruction UPDATE\",\n    \"tags\": \"newupdatetasktag\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "UpdateTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction UPDATE\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instruction\":\"NewTask instruction UPDATE\",\n    \"tags\": \"newupdatetasktag\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "UpdateTask Tags - Array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"tags\"] = jsonData.tags.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": [\"newupdatetasktag\", \"taskTag2\"]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "UpdateTask - No Tags (remain unchanged)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction UPDATE2\";",
									"tests[\"tags\"] = jsonData.tags.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instruction\":\"NewTask instruction UPDATE2\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Read Task Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7c6af8f-c978-41d6-adb2-6853cfcbb476",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"tagname\"] = jsonData[0].name === \"newupdatetasktag\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}",
								"tags"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "UpdateTask - Delete all Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction UPDATE2\";",
									"tests[\"tags\"] = jsonData.tags.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instruction\":\"NewTask instruction UPDATE2\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Read Task Tags Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7c6af8f-c978-41d6-adb2-6853cfcbb476",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"tagname\"] = jsonData[0].name === \"newupdatetasktag\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}",
								"tags"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Add 1st Task Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"NewComment\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"comment\"] = jsonData.comment === \"This is a comment\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}/comment?comment=This%20is%20a%20comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}",
								"comment"
							],
							"query": [
								{
									"key": "comment",
									"value": "This%20is%20a%20comment"
								}
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Update 1st Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"comment\"] = jsonData.comment === \"This is an updated comment\";"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/comment/{{NewComment}}?comment=This%20is%20an%20updated%20comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"comment",
								"{{NewComment}}"
							],
							"query": [
								{
									"key": "comment",
									"value": "This%20is%20an%20updated%20comment"
								}
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Add 2nd Task Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"comment\"] = jsonData.comment === \"This is a comment Number2\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}/comment?comment=This%20is%20a%20comment%20Number2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}",
								"comment"
							],
							"query": [
								{
									"key": "comment",
									"value": "This%20is%20a%20comment%20Number2"
								}
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Retrieve Single Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"comment\"] = jsonData.comment === \"This is an updated comment\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/comment/{{NewComment}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"comment",
								"{{NewComment}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Retrieve All Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"Comment1\"] = jsonData.length == 2;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}",
								"comments"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}/comment/{{NewComment}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}",
								"comment",
								"{{NewComment}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Release Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction UPDATE\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instruction\":\"NewTask instruction UPDATE\",\n    \"tags\": \"newupdatetasktag\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask}}"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Create new Task withTags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "705b2416-7628-4ad0-acbf-81bf9c0c477b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"NewTask1\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"NewTask With Tags\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask instruction\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"NewTask With Tags\",\n    \"parent\": {{TestChallenge}},\n    \"instruction\":\"NewTask instruction\",\n    \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{ \"identifier\":{\"value\":1111} }}]},\n    \"tags\":\"newtaskTag1, newtaskTag2\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Task Tags Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "accfcc10-4c9d-432b-9798-e893f2cfd930",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"newtasktag1\");",
									"    pm.expect(pm.response.text()).to.include(\"newtasktag2\");",
									"    pm.expect(pm.response.text()).to.include(\"newupdatetasktag\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/keywords?tagType=tasks&limit=1000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"keywords"
							],
							"query": [
								{
									"key": "tagType",
									"value": "tasks"
								},
								{
									"key": "limit",
									"value": "1000"
								}
							]
						},
						"description": "Gets the tag"
					},
					"response": []
				},
				{
					"name": "Task Tags Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "accfcc10-4c9d-432b-9798-e893f2cfd930",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"sometag1\");",
									"    pm.expect(pm.response.text()).to.include(\"sometag2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask1}}/tags/update?tags=sometag1,sometag2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask1}}",
								"tags",
								"update"
							],
							"query": [
								{
									"key": "tags",
									"value": "sometag1,sometag2"
								}
							]
						},
						"description": "Gets the tag"
					},
					"response": []
				},
				{
					"name": "Read Task Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "accfcc10-4c9d-432b-9798-e893f2cfd930",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"sometag1\");",
									"    pm.expect(pm.response.text()).to.include(\"sometag2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask1}}/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask1}}",
								"tags"
							]
						},
						"description": "Gets the tag"
					},
					"response": []
				},
				{
					"name": "Teardown",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{TestProject}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{TestProject}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project just created with the children"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VirtualChallenge",
			"item": [
				{
					"name": "Challenge Project Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "061180ba-93d9-4165-8ea2-d5b5ce27f475",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"SimpleProjectID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SimpleProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing all children used for api testing.\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SimpleProject\",\n    \"description\":\"Test project containing all children used for api testing.\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a base project for all the other Map Roulette API Testing"
					},
					"response": []
				},
				{
					"name": "Challenge Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31fa6818-074e-4220-b1fa-819310da0d7d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"TagsChallengeID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"TagsChallenge\";",
									"tests[\"description\"] = jsonData.description === \"A simple challenge containing only the basic elements for a challenge and two tags\";",
									"tests[\"instruction\"] = jsonData.instruction === \"Instruction for the simple tag challenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"TagsChallenge\",\n    \"description\":\"A simple challenge containing only the basic elements for a challenge and two tags\",\n    \"parent\":{{SimpleProjectID}},\n    \"instruction\":\"Instruction for the simple tag challenge\",\n    \"enabled\":false,\n    \"tags\":\"tag1,tag2\",\n    \"children\": [\n        {\n            \"name\":\"Task 1\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]}\n        },\n        {\n            \"name\":\"Task 2\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103,1.5]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103.1,1.6]},\"properties\":{}}]}\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						},
						"description": "Creates the most basic challenge with the least set of options and a couple of tags in the body json"
					},
					"response": []
				},
				{
					"name": "Challenge Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"TagsChallenge\";",
									"tests[\"description\"] = jsonData.description === \"A simple challenge containing only the basic elements for a challenge and two tags\";",
									"tests[\"instruction\"] = jsonData.instruction === \"Instruction for the simple tag challenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}"
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"Task1\"] = jsonData[0].name === \"Task 1\";",
									"tests[\"Task2\"] = jsonData[1].name === \"Task 2\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{TagsChallengeID}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{TagsChallengeID}}",
								"tasks"
							]
						},
						"description": "Gets the tasks of the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "debcb03c-61d4-41ac-b44c-c4c004a4ef17",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"VirtualChallengeID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"test\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"test\",\n  \"searchParameters\":{\n    \"challengeIds\": [ {{TagsChallengeID}} ],\n    \"location\": {\n      \"left\":102,\n      \"bottom\":0,\n      \"right\":104,\n      \"top\":2\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e033501-5ba7-41b4-be01-a381af19764a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"test\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Read By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e033501-5ba7-41b4-be01-a381af19764a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"test\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallengebyname/test",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallengebyname",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15d75894-c8c7-4b94-aa40-df2dc493dee9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"testUpdate\";"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"testUpdate\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a6e7819-860d-4a17-b2b8-6362f5ccda8f",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData[0].name === \"testUpdate\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenges",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenges"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Task List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "905e5406-7776-4bcf-a8cb-27617a05c142",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"size\"] = jsonData.length === 2;",
									"pm.globals.set(\"VChallengeTask1ID\", jsonData[0].id);",
									"pm.globals.set(\"VChallengeTask2ID\", jsonData[1].id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeID}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeID}}",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Random Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "252d9d44-2975-4a1f-9d54-bc8a57e7b769",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeID}}/task",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeID}}",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Next Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba4b7365-f1e5-4e96-805c-469fc29537eb",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"id\"] = jsonData.id == pm.globals.get(\"VChallengeTask2ID\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeID}}/nextTask/{{VChallengeTask1ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeID}}",
								"nextTask",
								"{{VChallengeTask1ID}}"
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Previous Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8741daf9-46d3-4e42-aa20-f29ed39caa34",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"id\"] = jsonData.id == pm.globals.get(\"VChallengeTask1ID\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeID}}/previousTask/{{VChallengeTask2ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeID}}",
								"previousTask",
								"{{VChallengeTask2ID}}"
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Nearby Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "040adc26-6e95-4944-b364-3aab59535897",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Task 1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeID}}/tasksNearby/{{VChallengeTask2ID}}?limit=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeID}}",
								"tasksNearby",
								"{{VChallengeTask2ID}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						},
						"description": "Gets the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Virtual Challenge GeoJSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d2536b9-3357-4448-b6d6-cf827a945ba6",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/view/{{VirtualChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"view",
								"{{VirtualChallengeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Clustered Points",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edf43e3b-fae6-4701-a734-f1e516779056",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/clustered/{{VirtualChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"clustered",
								"{{VirtualChallengeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a423abbb-b93e-478a-80d4-e0d2b09d5875",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Creation ID List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "266672e7-9dab-437f-a9c8-96131099737d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"VirtualChallengeIDList\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"testVCList\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"testVCList\",\n  \"taskIdList\":[{{VChallengeTask1ID}}, {{VChallengeTask2ID}}]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge ID Task List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "608ddc0f-ebb0-436f-940e-4165b0c6061a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"size\"] = jsonData.length === 2;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeIDList}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeIDList}}",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Delete ID List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a423abbb-b93e-478a-80d4-e0d2b09d5875",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/{{VirtualChallengeIDList}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"{{VirtualChallengeIDList}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Creation Expiry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66484512-de78-42a6-9a03-ab5d7049c9d7",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"VirtualChallengeID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"test\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"test\",\n  \"searchParameters\":{\n    \"challengeIds\": [ {{TagsChallengeID}} ],\n    \"location\": {\n      \"left\":102,\n      \"bottom\":0,\n      \"right\":104,\n      \"top\":2\n    }\n  },\n  \"expiry\":\"1 s\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Expiry Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e2d657d-efa4-4dfc-800b-d094be10e9d6",
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 404\"] = responseCode.code === 404;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge/11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "Virtual Challenge Creation w/Boundings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "debcb03c-61d4-41ac-b44c-c4c004a4ef17",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"VirtualChallengeID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"testBoundingGeos1\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"testBoundingGeos1\",\n  \"searchParameters\":{\n    \"challengeIds\": [ {{TagsChallengeID}} ],\n    \"boundingGeometries\": [\n    \t{\"bounding\": {\n    \t\t\"type\":\"Polygon\",\n    \t\t\"coordinates\":[[[100,0],[100,3],[105,3],[105,0],[100,0]]]\n    \t}},\n    \t{\"bounding\": {\n    \t\t\"type\":\"Polygon\",\n    \t\t\"coordinates\":[[[1,1],[1,2],[2,2],[2,1],[1,1]]]\n    \t}}\n    ]\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/virtualchallenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"virtualchallenge"
							]
						}
					},
					"response": []
				},
				{
					"name": "Challenge Project Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project that was used for the challenge tests."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "data",
			"item": [
				{
					"name": "ChallengeSummary",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/data/challenge/8953?priority=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"data",
								"challenge",
								"8953"
							],
							"query": [
								{
									"key": "priority",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "project",
			"item": [
				{
					"name": "Project Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8b33660-98cc-40fd-88a5-6a51bf8e541d",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleProjectID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SimpleProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing all children used for api testing.\";",
									"tests[\"isVirtual\"] = jsonData.isVirtual === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SimpleProject\",\n    \"description\":\"Test project containing all children used for api testing.\",\n    \"enabled\":true\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a base project for all the other Map Roulette API Testing"
					},
					"response": []
				},
				{
					"name": "Project Creation With Children",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"ProjectWithChildren\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"ProjectWithChildren\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing 2 children.\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"ProjectWithChildren\",\n    \"description\":\"Test project containing 2 children.\",\n    \"enabled\":true,\n    \"children\": [\n        {\n            \"name\":\"Challenge1 Child\",\n            \"description\":\"Challenge1 Child description\",\n            \"instruction\":\"Challenge1 Child instruction\",\n            \"children\":[\n                {\n                    \"name\":\"Task 1\",\n                    \"description\":\"Task 1 description\",\n                    \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]}\n                },\n                {\n                    \"name\":\"Task 2\",\n                    \"description\":\"Task 2 description\",\n                    \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103,1.5]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103.1,1.6]},\"properties\":{}}]}\n                }\n            ]\n        },\n        {\n            \"name\":\"Challenge2 Child\",\n            \"description\":\"Challenge2 Child description\",\n            \"instruction\":\"Challenge2 Child instruction\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a project with two children within the same request."
					},
					"response": []
				},
				{
					"name": "Project Children",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"name\"] = jsonData[0].name === \"Challenge1 Child\";",
									"tests[\"description\"] = jsonData[0].description === \"Challenge1 Child description\";",
									"tests[\"instruction\"] = jsonData[0].instruction === \"Challenge1 Child instruction\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{ProjectWithChildren}}/challenges",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{ProjectWithChildren}}",
								"challenges"
							]
						},
						"description": "Gets the children of the project"
					},
					"response": []
				},
				{
					"name": "Project Children 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"jsonData.name === \"ProjectWithChildren\";",
									"tests[\"name\"] = jsonData.children[0].name === \"Challenge1 Child\";",
									"tests[\"description\"] = jsonData.children[0].description === \"Challenge1 Child description\";",
									"tests[\"instruction\"] = jsonData.children[0].instruction === \"Challenge1 Child instruction\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{ProjectWithChildren}}/children",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{ProjectWithChildren}}",
								"children"
							]
						},
						"description": "Gets the children of the project"
					},
					"response": []
				},
				{
					"name": "Project Random Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"jsonData[0].name === \"Task 2\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{ProjectWithChildren}}/tasks?cs=2&ts=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{ProjectWithChildren}}",
								"tasks"
							],
							"query": [
								{
									"key": "cs",
									"value": "2"
								},
								{
									"key": "ts",
									"value": "2"
								}
							]
						},
						"description": "Gets the children of the project"
					},
					"response": []
				},
				{
					"name": "Project Clustered Points",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/project/search/clustered?search=%7B%22challengeSearch%22%3A%22Challenge2%22%7D",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"search",
								"clustered"
							],
							"query": [
								{
									"key": "search",
									"value": "%7B%22challengeSearch%22%3A%22Challenge2%22%7D"
								}
							]
						},
						"description": "Gets the children of the project"
					},
					"response": []
				},
				{
					"name": "Project With Children Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{ProjectWithChildren}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{ProjectWithChildren}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project just created with the children"
					},
					"response": []
				},
				{
					"name": "Project Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"name\"] = jsonData.name === \"SimpleProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing all children used for api testing. (Update)\";"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\":\"Test project containing all children used for api testing. (Update)\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID}}"
							]
						},
						"description": "Updates the project description"
					},
					"response": []
				},
				{
					"name": "Project Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"name\"] = jsonData.name === \"SimpleProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing all children used for api testing. (Update)\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID}}"
							]
						},
						"description": "Gets the project from the supplied ID. Will need to modify the ID based on the ID returned from the creation API."
					},
					"response": []
				},
				{
					"name": "Project List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"Body matches name\"] = responseBody.has(\"SimpleProject\");",
									"tests[\"Body matches description\"] = responseBody.has(\"Test project containing all children used for api testing. (Update)\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/projects?limit=-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"projects"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						},
						"description": "Lists all the projects in the system"
					},
					"response": []
				},
				{
					"name": "Project Find",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body matches name\"] = responseBody.has(\"SimpleProject\");",
									"tests[\"Body matches description\"] = responseBody.has(\"Test project containing all children used for api testing. (Update)\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/projects/find?q=SimpleProject",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"projects",
								"find"
							],
							"query": [
								{
									"key": "q",
									"value": "SimpleProject"
								}
							]
						},
						"description": "Find the APITestProject in the system."
					},
					"response": []
				},
				{
					"name": "Project By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"name\"] = jsonData.name === \"SimpleProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing all children used for api testing. (Update)\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/projectByName/SimpleProject",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"projectByName",
								"SimpleProject"
							]
						},
						"description": "Retrieve the project by the provided name"
					},
					"response": []
				},
				{
					"name": "Project Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project created by the project creation. Would need to modify the supplied ID."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VirtualProject",
			"item": [
				{
					"name": "Virtual Project Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8b33660-98cc-40fd-88a5-6a51bf8e541d",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"VPProjectID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"VPProject\";",
									"tests[\"description\"] = jsonData.description === \"Test virtual project for api testing.\";",
									"tests[\"isVirtual\"] = jsonData.isVirtual === true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"VPProject\",\n    \"description\":\"Test virtual project for api testing.\",\n    \"enabled\":true,\n    \"isVirtual\":true\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a base project for all the other Map Roulette API Testing"
					},
					"response": []
				},
				{
					"name": "Challenge Project Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2e239b5-f0bb-4db2-9ff5-c35dcad3ac9a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleProjectID1\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SimpleProject1\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing all children used for api testing.\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SimpleProject1\",\n    \"description\":\"Test project containing all children used for api testing.\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a base project for all the other Map Roulette API Testing"
					},
					"response": []
				},
				{
					"name": "Challenge Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c9d2e3d-d15e-404e-b481-401d3784fa86",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleChallengeID1\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SimpleChallenge1\";",
									"tests[\"description\"] = jsonData.description === \"A simple challenge containing only the basic elements for a challenge\";",
									"tests[\"instruction\"] = jsonData.instruction === \"Instruction for the simple challenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SimpleChallenge1\",\n    \"description\":\"A simple challenge containing only the basic elements for a challenge\",\n    \"parent\":{{SimpleProjectID1}},\n    \"instruction\":\"Instruction for the simple challenge\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						},
						"description": "Creates the most basic challenge with the least set of options in the body json"
					},
					"response": []
				},
				{
					"name": "VP Challenge Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b0b445c-c19d-4118-be3c-df9246996105",
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{VPProjectID}}/challenge/{{SimpleChallengeID1}}/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{VPProjectID}}",
								"challenge",
								"{{SimpleChallengeID1}}",
								"add"
							]
						},
						"description": "Creates the most basic challenge with the least set of options in the body json"
					},
					"response": []
				},
				{
					"name": "Project List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b990bc5d-5b6a-4f0b-ab1f-73ed847db742",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"Body matches name\"] = responseBody.has(\"VPProject\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/projects?limit=-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"projects"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						},
						"description": "Lists all the projects in the system"
					},
					"response": []
				},
				{
					"name": "VP Project Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5764c1b4-b2f2-410b-9bf1-fca395d7b00a",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"name\"] = jsonData.name === \"VPProject\";",
									"tests[\"isVirtual\"] = jsonData.isVirtual === true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{VPProjectID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{VPProjectID}}"
							]
						},
						"description": "Gets the project from the supplied ID. Will need to modify the ID based on the ID returned from the creation API."
					},
					"response": []
				},
				{
					"name": "VP Project Children",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bc048ac-0af1-4d72-9b76-18cb706e8cda",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"jsonData.name === \"VPProject\";",
									"tests[\"name\"] = jsonData.children[0].name === \"SimpleChallenge1\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{VPProjectID}}/children",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{VPProjectID}}",
								"children"
							]
						},
						"description": "Gets the children of the project"
					},
					"response": []
				},
				{
					"name": "VP Project Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5764c1b4-b2f2-410b-9bf1-fca395d7b00a",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/data/project/summary?projectList={{VPProjectID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"data",
								"project",
								"summary"
							],
							"query": [
								{
									"key": "projectList",
									"value": "{{VPProjectID}}"
								}
							]
						},
						"description": "Gets the project from the supplied ID. Will need to modify the ID based on the ID returned from the creation API."
					},
					"response": [
						{
							"name": "VP Project Summary",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "apiKey",
										"value": "test"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/v2/data/project/summary?projectList={{VPProjectID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"v2",
										"data",
										"project",
										"summary"
									],
									"query": [
										{
											"key": "projectList",
											"value": "{{VPProjectID}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Accept-Encoding,Origin"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Thu, 23 May 2019 15:01:15 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "28"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "VP Project Leaderboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5764c1b4-b2f2-410b-9bf1-fca395d7b00a",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/data/user/leaderboard?projectIds={{VPProjectID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"data",
								"user",
								"leaderboard"
							],
							"query": [
								{
									"key": "projectIds",
									"value": "{{VPProjectID}}"
								}
							]
						},
						"description": "Gets the project from the supplied ID. Will need to modify the ID based on the ID returned from the creation API."
					},
					"response": []
				},
				{
					"name": "VP Project Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5764c1b4-b2f2-410b-9bf1-fca395d7b00a",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/data/project/activity?projectList={{VPProjectID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"data",
								"project",
								"activity"
							],
							"query": [
								{
									"key": "projectList",
									"value": "{{VPProjectID}}"
								}
							]
						},
						"description": "Gets the project from the supplied ID. Will need to modify the ID based on the ID returned from the creation API."
					},
					"response": []
				},
				{
					"name": "VP Project User Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5764c1b4-b2f2-410b-9bf1-fca395d7b00a",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/data/user/summary?projectList={{VPProjectID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"data",
								"user",
								"summary"
							],
							"query": [
								{
									"key": "projectList",
									"value": "{{VPProjectID}}"
								}
							]
						},
						"description": "Gets the project from the supplied ID. Will need to modify the ID based on the ID returned from the creation API."
					},
					"response": []
				},
				{
					"name": "VP Project Raw Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5764c1b4-b2f2-410b-9bf1-fca395d7b00a",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"[]\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/data/raw/activity?projectIds={{VPProjectID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"data",
								"raw",
								"activity"
							],
							"query": [
								{
									"key": "projectIds",
									"value": "{{VPProjectID}}"
								}
							]
						},
						"description": "Gets the project from the supplied ID. Will need to modify the ID based on the ID returned from the creation API."
					},
					"response": []
				},
				{
					"name": "VP Challenge Remove",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb86b48d-e330-49e5-a4da-d098b2136260",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{VPProjectID}}/challenge/{{SimpleChallengeID1}}/remove",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{VPProjectID}}",
								"challenge",
								"{{SimpleChallengeID1}}",
								"remove"
							]
						},
						"description": "Creates the most basic challenge with the least set of options in the body json"
					},
					"response": []
				},
				{
					"name": "Project Children",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ded06c13-b45a-4536-9b8c-08232a15a1ca",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"name\"] = jsonData[0].name === \"SimpleChallenge1\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID1}}/challenges",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID1}}",
								"challenges"
							]
						},
						"description": "Gets the children of the project"
					},
					"response": []
				},
				{
					"name": "Project Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1257b0e9-25a3-4843-a7c2-1e366be2cf94",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID1}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID1}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project created by the project creation. Would need to modify the supplied ID."
					},
					"response": []
				},
				{
					"name": "VP Project Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dd6dd4b-9180-42aa-9d47-50b8eccc0771",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{VPProjectID}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{VPProjectID}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project created by the project creation. Would need to modify the supplied ID."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tag",
			"item": [
				{
					"name": "Tag Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d386575-6c95-4065-a746-3f39e5a793d0",
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"TestTagID\", jsonData.id);",
									"tests[\"name\"] = jsonData.name === \"testtag1\";",
									"tests[\"description\"] = jsonData.description === \"TestTag1 description\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"tagType\":\"challenges\",\n    \"name\":\"TestTag1\",\n    \"description\":\"TestTag1 description\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/keyword",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"keyword"
							]
						},
						"description": "Creates a basic tag"
					},
					"response": []
				},
				{
					"name": "Tag Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"name\"] = jsonData.name === \"testtag1\";",
									"tests[\"description\"] = jsonData.description === \"TestTag1 description\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/tag/{{TestTagID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"tag",
								"{{TestTagID}}"
							]
						},
						"description": "Gets the tag"
					},
					"response": []
				},
				{
					"name": "Tag Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"name\"] = jsonData.name === \"updatedtesttag1\";",
									"tests[\"description\"] = jsonData.description === \"Updated Tag description\";"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"UpdatedTestTag1\",\n    \"description\":\"Updated Tag description\"\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/tag/{{TestTagID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"tag",
								"{{TestTagID}}"
							]
						},
						"description": "Updates a basic tag"
					},
					"response": []
				},
				{
					"name": "Tag Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/tag/{{TestTagID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"tag",
								"{{TestTagID}}"
							]
						},
						"description": "Deletes the tag"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Get Super User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2740d979-7705-40db-a5af-a07618e427c0",
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"id\"] = jsonData.id === -999;",
									"tests[\"test1\"] = jsonData.properties.test1 === \"value1\";",
									"tests[\"test2\"] = jsonData.properties.test2 === 8975;",
									"tests[\"test3\"] = jsonData.properties.test3 === true;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"properties\": {\n\t\t\"test1\":\"value1\",\n\t\t\"test2\":8975,\n\t\t\"test3\":true\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/user/-999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"user",
								"-999"
							]
						},
						"description": "Gets the super user that is automatically created with the system."
					},
					"response": []
				},
				{
					"name": "Get OSM Super User ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a015f41e-3b14-4edf-a905-1af643a30a9e",
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"id\"] = jsonData.id === -999;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/osmuser/SuperUser",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"osmuser",
								"SuperUser"
							]
						},
						"description": "Gets the super user that is automatically created with the system by using the super user mocked OSM name."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SuggestedFixes",
			"item": [
				{
					"name": "testChange Delta",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2a68b5c-c408-4710-b9a8-ced1dfcf0396",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"12345\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"WAY\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"testit\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"lanes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "apiKey",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\n  \"osmId\":12345,\n  \"osmType\":\"WAY\",\n  \"updates\":{\"lanes\": \"3\", \"testit\": \"yes\"},\n  \"deletes\":[\"oneway\"]\n}]"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/change/tag/test?changeType=delta",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"change",
								"tag",
								"test"
							],
							"query": [
								{
									"key": "changeType",
									"value": "delta"
								}
							]
						},
						"description": "testing a sample suggested fix change"
					},
					"response": []
				},
				{
					"name": "Challenge Project Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleProjectID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SimpleProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project containing all children used for api testing.\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SimpleProject\",\n    \"description\":\"Test project containing all children used for api testing.\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						},
						"description": "Creates a base project for all the other Map Roulette API Testing"
					},
					"response": []
				},
				{
					"name": "Challenge Creation with Top-Level SF",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04cdcb8b-ce2e-4a7c-80e6-a1b63c00fb38",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleChallengeID\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SFChallenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SFChallenge\",\n    \"parent\": {{SimpleProjectID}},\n    \"description\":\"SFChallenge description\",\n    \"instruction\":\"SFChallenge instruction\",\n    \"children\":[\n        {\n            \"name\":\"SF Task 1\",\n\t        \"suggestedFix\":  {\n        \t\t\"osmId\": 243499890,\n    \t\t\t\"osmType\": \"way\",\n        \t\t\"update\": {\n            \t\t\"tags\": {\n                \t\t\"update\": [{\"name\":\"building\", \"value\":\"yes\"}],            \n                \t\t\"delete\": [{\"name\":\"bldg\", \"ifUnused\":\"true\"}]\n        \t\t\t}\n    \t\t\t}\n    \t\t},\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\", \"building\": \"ok\", \"bldg\":\"y\"\n            }},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]}\n        }               \n    ]\n}\n"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						},
						"description": "Creates the most basic challenge with the least set of options in the body json"
					},
					"response": []
				},
				{
					"name": "Challenge Creation with Embedded SF",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04cdcb8b-ce2e-4a7c-80e6-a1b63c00fb38",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SimpleChallengeID1\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"SFEChallenge\";",
									"tests[\"challengeType\"] = jsonData.challengeType === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"SFEChallenge\",\n    \"parent\": {{SimpleProjectID}},\n    \"description\":\"SFEChallenge description\",\n    \"instruction\":\"SFEChallenge instruction\",\n    \"children\":[\n        {\n            \"name\":\"SFE Task 1\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\", \"building\": \"ok\", \"bldg\":\"y\",\n            \t\"maproulette\": {\n            \t\t\"suggestedFix\":  {\n        \t\t\t\t\"update\": {\n            \t\t\t\t\"tags\": {\n                \t\t\t\t\"update\": [{\"name\":\"building\", \"value\":\"yes\"}],            \n                \t\t\t\t\"delete\": [{\"name\":\"bldg\", \"ifUnused\":\"true\"}]\n        \t\t\t\t\t}\n        \t\t\t\t}\n    \t\t\t\t}\n            \t}\n            }},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]}\n        }               \n    ]\n}\n"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						},
						"description": "Creates the most basic challenge with the least set of options in the body json"
					},
					"response": []
				},
				{
					"name": "Challenge Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "166ebb2c-eda3-4c07-9e30-71e275566ff5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"SFTagID\", jsonData[0].id);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"SF Task 1\"] = jsonData[0].name === \"SF Task 1\";",
									"postman.setGlobalVariable(\"SFChallengeTask1ID\", jsonData[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge/{{SimpleChallengeID}}/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge",
								"{{SimpleChallengeID}}",
								"tasks"
							]
						},
						"description": "Gets the tasks of the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "apply tag change to task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2a68b5c-c408-4710-b9a8-ced1dfcf0396",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "apiKey",
								"type": "text",
								"value": "test"
							},
							{
								"key": "comment",
								"type": "text",
								"value": "Submitted with Postman."
							},
							{
								"key": "requestReview",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"comment\":\"This is just a test. Please ignore.\",\n  \"changes\":[{\n\t  \"osmId\":12345,\n\t  \"osmType\":\"WAY\",\n\t  \"updates\":{\"testit\": \"yes\"},\n\t  \"deletes\":[]\n\t}]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{SFTagID}}/fix/apply?tags=automated,postman",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{SFTagID}}",
								"fix",
								"apply"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "automated,postman"
								}
							]
						},
						"description": "testing a sample suggested fix change"
					},
					"response": []
				},
				{
					"name": "Read Tag Fix Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "166ebb2c-eda3-4c07-9e30-71e275566ff5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"SF Task 1\"] = jsonData.name === \"SF Task 1\";",
									"tests[\"SF Task 1 status is fixed\"] = jsonData.status === 1;",
									"tests[\"SF Task 1 review status is 0\"] = jsonData.reviewStatus === 0;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{SFTagID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{SFTagID}}"
							]
						},
						"description": "Gets the tasks of the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Read Tag Task MR Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "166ebb2c-eda3-4c07-9e30-71e275566ff5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"SF Task 1\"]  = jsonData[0].name === \"postman\";",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{SFTagID}}/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{SFTagID}}",
								"tags"
							]
						},
						"description": "Gets the tasks of the challenge for the provided ID"
					},
					"response": []
				},
				{
					"name": "Challenge Project Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{SimpleProjectID}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{SimpleProjectID}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						},
						"description": "Deletes the project that was used for the challenge tests."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "taskBundles",
			"item": [
				{
					"name": "Setup Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b66704e2-4a0d-469b-b3ea-b8178853b754",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"TestBundleProject\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"TestBundleProject\";",
									"tests[\"description\"] = jsonData.description === \"Test project.\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"TestBundleProject\",\n    \"description\":\"Test project.\",\n    \"enabled\":false\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup Challenge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38e2230-0f76-4588-80f6-6cc7772d1ff4",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"TestBundleChallenge\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"TestBundleChallenge\";",
									"tests[\"description\"] = jsonData.description === \"TestChallenge description\";",
									"tests[\"instruction\"] = jsonData.instruction === \"TestChallenge instruction\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"TestBundleChallenge\",\n    \"parent\": {{TestBundleProject}},\n    \"description\":\"TestChallenge description\",\n    \"instruction\":\"TestChallenge instruction\",\n    \"children\":[\n        {\n            \"name\":\"Task 1\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{}}]}\n        },\n        {\n            \"name\":\"Task 2\",\n            \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103,1.5]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[103.1,1.6]},\"properties\":{}}]}\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/challenge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"challenge"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Task1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95f07c63-a41d-410d-ad61-2617d001c8fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"NewTask1\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"NewTask1\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask1 instruction\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"NewTask1\",\n    \"parent\": {{TestBundleChallenge}},\n    \"instruction\":\"NewTask1 instruction\",\n    \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.1,0.6]},\"properties\":{\"id\": \"test2\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.2,0.7]},\"properties\":{ \"identifier\":{\"value\":1111} }}]}\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Task2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecdd7063-cdcc-4607-bcae-a32874ce4b04",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"NewTask2\", jsonData.id);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"tests[\"name\"] = jsonData.name === \"NewTask2\";",
									"tests[\"instruction\"] = jsonData.instruction === \"NewTask2 instruction\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"NewTask2\",\n    \"parent\": {{TestBundleChallenge}},\n    \"instruction\":\"NewTask2 instruction\",\n    \"geometries\":{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[105.1,1.6]},\"properties\":{\"id\": \"test3\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[105.2,1.7]},\"properties\":{ \"identifier\":{\"value\":1111} }}]}\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "705b2416-7628-4ad0-acbf-81bf9c0c477b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"NewBundle\", jsonData.bundleId);",
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"New Bundle\",\n    \"taskIds\": [{{NewTask1}},{{NewTask2}}]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/taskBundle",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"taskBundle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Bundle Tasks Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0bacf4b-7616-4d8a-ae40-205f8ee5d7c1",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"NewComment\", jsonData.id);",
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/taskBundle/{{NewBundle}}/comment?comment=This%20is%20a%20comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"taskBundle",
								"{{NewBundle}}",
								"comment"
							],
							"query": [
								{
									"key": "comment",
									"value": "This%20is%20a%20comment"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "setTaskBundleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/taskBundle/{{NewBundle}}/2?primaryId={{NewTask1}}&comment=SomeComment&requestReview=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"taskBundle",
								"{{NewBundle}}",
								"2"
							],
							"query": [
								{
									"key": "primaryId",
									"value": "{{NewTask1}}"
								},
								{
									"key": "comment",
									"value": "SomeComment"
								},
								{
									"key": "requestReview",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f34aeb15-22d1-4a6c-a562-0e816d81de82",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask1\";",
									"tests[\"status\"] = jsonData.status === 2;",
									"tests[\"bundlePrimary\"] = jsonData.isBundlePrimary === true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to Create Dup Bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "705b2416-7628-4ad0-acbf-81bf9c0c477b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 400\"] = responseCode.code === 400;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"New Dup Bundle\",\n    \"taskIds\": [{{NewTask1}},{{NewTask2}}]\n}"
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/taskBundle",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"taskBundle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt setTaskStatus on Bundle Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 400\"] = responseCode.code === 400;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask1}}/1?comment=SomeComment&requestReview=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask1}}",
								"1"
							],
							"query": [
								{
									"key": "comment",
									"value": "SomeComment"
								},
								{
									"key": "requestReview",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Start Task Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f34aeb15-22d1-4a6c-a562-0e816d81de82",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask1\";",
									"tests[\"reviewStatus\"] = jsonData.reviewStatus === 0;",
									"tests[\"reviewClaimedBy\"] = jsonData.reviewClaimedBy === -999;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask1}}/review/start",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask1}}",
								"review",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Other Bundle Task (after start review)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f34aeb15-22d1-4a6c-a562-0e816d81de82",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask2\";",
									"tests[\"status\"] = jsonData.status === 2;",
									"tests[\"bundlePrimary\"] = jsonData.isBundlePrimary !== true;",
									"tests[\"reviewClaimedBy\"] = jsonData.reviewClaimedBy === -999;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask2}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "setBundleTaskReviewStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/taskBundle/{{NewBundle}}/review/1?comment=SomeReviewCommet&reviewStatus=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"taskBundle",
								"{{NewBundle}}",
								"review",
								"1"
							],
							"query": [
								{
									"key": "comment",
									"value": "SomeReviewCommet"
								},
								{
									"key": "reviewStatus",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Task After Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f34aeb15-22d1-4a6c-a562-0e816d81de82",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"name\"] = jsonData.name === \"NewTask1\";",
									"tests[\"status\"] = jsonData.status === 2;",
									"tests[\"bundlePrimary\"] = jsonData.isBundlePrimary === true;",
									"tests[\"reviewStatus\"] = jsonData.reviewStatus === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/task/{{NewTask1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"task",
								"{{NewTask1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch Bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bb07589-1294-4a38-8299-caa0e8cfa152",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"taskName1\"] = jsonData.tasks[0].name === \"NewTask1\"",
									"tests[\"taskStatus1\"] = jsonData.tasks[0].status === 2",
									"tests[\"taskName2\"] = jsonData.tasks[1].name === \"NewTask2\"",
									"tests[\"taskStatus2\"] = jsonData.tasks[1].status === 2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:9000/api/v2/taskBundle/{{NewBundle}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"taskBundle",
								"{{NewBundle}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "unbundleTasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f56731b-4f82-4f20-acc5-6d0878a787ee",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"tasksLength\"] = Object.keys(jsonData.tasks).length === 1",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/taskBundle/{{NewBundle}}/unbundle?taskIds={{NewTask2}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"taskBundle",
								"{{NewBundle}}",
								"unbundle"
							],
							"query": [
								{
									"key": "taskIds",
									"value": "{{NewTask2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b81c410-0935-4d7b-89fc-f6bba888a7e4",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/taskBundle/{{NewBundle}}?primaryId={{NewTask1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"taskBundle",
								"{{NewBundle}}"
							],
							"query": [
								{
									"key": "primaryId",
									"value": "{{NewTask1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Teardown",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b81c410-0935-4d7b-89fc-f6bba888a7e4",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status\"] = jsonData.status === \"OK\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:9000/api/v2/project/{{TestBundleProject}}?immediate=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"v2",
								"project",
								"{{TestBundleProject}}"
							],
							"query": [
								{
									"key": "immediate",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}