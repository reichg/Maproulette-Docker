###
# tags: [ Project ]
# summary: Create a Project
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create a new project from the supplied JSON in the body.
#               When creating a Project object you can within the same json body include Challenge
#               children under the "children" key, and within each Challenge Task children can be
#               created using another "children" key under the parent Challenge. When creating the
#               the Project, leave the ID field out of the body json, if updating (generally use the
#               PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Project with a unique id
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
#   '304':
#     description: Not updated responding with empty payload if Project already exists and nothing to update
#   '400':
#     description: Invalid json payload for Project
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the project body, include the key "children" to create Challenge children objects.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
###
POST    /project                                    @org.maproulette.controllers.api.ProjectController.create
###
# tags: [ Project ]
# summary: Create a batch of Projects
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create multiple new projects from the JSONArray supplied in the body. Each JSON object
#               is basically a project object that is processed similarly to the singular /project POST. If
#               projects already exist with the name, they will simply be skipped, ie. not updated.
# responses:
#   '200':
#     description: A simple OK status message
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '304':
#     description: Not updated responding with empty payload if Project already exists and nothing to update
#   '400':
#     description: Invalid json payload for Project
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the project body, include the key "children" a Project JSON object within the array to create Challenge children objects.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Project'
###
POST    /projects                                   @org.maproulette.controllers.api.ProjectController.batchUploadPost
###
# tags: [ Project ]
# summary: Updates a Project
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update an already existing project from the supplied JSON in the body.
#               When updating the Project object you can within the same json body include Challenge
#               children under the "children" key, and within each Challenge Task children can be
#               created or updated using another "children" key under the parent Challenge.
# responses:
#   '200':
#     description: The updated JSON Project
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
#   '304':
#     description: Not updated responding with empty payload if Project already exists and nothing to update
#   '400':
#     description: Invalid json payload for Project
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     description: The ID of the project that is being updated
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the project body, include the key "children" to create or update Challenge children objects.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
###
PUT     /project/:id                                @org.maproulette.controllers.api.ProjectController.update(id:Long)
###
# tags: [ Project ]
# summary: Update a batch of Projects
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update multiple already existing projects from the JSONArray supplied in the body. Each JSON object
#               is basically a project object that is processed similarly to the singular /project POST. If a project
#               does not exist it will be created from scratch
# responses:
#   '200':
#     description: A simple OK status message
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '304':
#     description: Not updated responding with empty payload if Project already exists and nothing to update
#   '400':
#     description: Invalid json payload for Project
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the project body, include the key "children" a Project JSON object within the array to create Challenge children objects.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Project'
###
PUT     /projects                                   @org.maproulette.controllers.api.ProjectController.batchUploadPut
###
# tags: [ Project ]
# summary: Retrieves an already existing Project
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Retrieves an already existing project based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Project
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
#   '404':
#     description: ID field supplied but no object found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the project to retrieve
###
GET     /project/:id                                @org.maproulette.controllers.api.ProjectController.read(id:Long)
###
# tags: [ Project ]
# summary: Retrieves already existing Projects based on a given list of ids
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Retrieves already existing projects based on the supplied IDs
# responses:
#   '200':
#     description: A list of projects
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Project'
#   '404':
#     description: No projects found matching the ids given
# parameters:
#   - name: projectIds
#     in: query
#     description: Comma-separated list of project ids for which projects are desired.
###
GET     /projectsById                               @org.maproulette.controllers.api.ProjectController.fetch(projectIds:String)
###
# tags: [ Project ]
# summary: Retrieves an already existing Project
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Retrieves an already existing project based on the name of the project rather than an ID
# responses:
#   '200':
#     description: The retrieved Project with a unique id
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
#   '404':
#     description: No project found matching the provided name
# parameters:
#   - name: id
#     in: query
#     description: Ignore this field, it is not used
#   - name: name
#     in: path
#     description: The name of the project being retrieved
###
GET     /projectByName/:name                        @org.maproulette.controllers.api.ProjectController.readByName(id:Long ?= -1, name:String)
###
# tags: [ Project ]
# summary: Deletes an existing Project
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Deletes an existing project based on the supplied ID. This will delete all the children Challenges and Tasks under the project as well.
# responses:
#   '200':
#     description: A status message containing the ID of the project that was just deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No project found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the project being deleted
#   - name: immediate
#     in: query
#     description: If set to true, will delete the virtual challenge immediately instead of delayed
#     default: false
#     type: boolean
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /project/:id                                @org.maproulette.controllers.api.ProjectController.delete(id:Long, immediate:Boolean ?= false)
###
# tags: [ Project ]
# summary: Undeletes a Project
# description: If a Project has been setup for deletion and not removed from the database we can undelete it and make it so that it does not get deleted anymore. During the undelete of this project, and challenges that were scheduled for deletion will also be undeleted
# responses:
#   '200':
#     description: The Project that was undeleted.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Project found matching the provided id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Project being deleted
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
PUT  /project/:id/undelete                         @org.maproulette.controllers.api.ProjectController.undelete(id:Long)
###
# tags: [ Project ]
# summary: Find project matching search criteria
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Finds a list of projects that match a specific search criteria. The search criteria is simply a string that is contained in the project name. String case sensitivity is ignored.
# responses:
#   '200':
#     description: A list of projects found
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Project'
#   '404':
#     description: No project found matching the match the provided search string
# parameters:
#   - name: q
#     in: query
#     description: The search string used to match the project names. Default value is empty string, ie. will match everything.
#   - name: parentId
#     in: query
#     description: This field will be ignored for this request
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Flag to set if only wanting enabled projects returned. Default value is true.
###
GET     /projects/find                              @org.maproulette.controllers.api.ProjectController.find(q:String ?= "", parentId:Long ?= -1, limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
###
# tags: [ Project ]
# summary: List all the projects.
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Lists all the projects in the system
# responses:
#   '200':
#     description: A list of all the projects
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Project'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Flag to set if only wanting enabled projects returned. Default value is true.
###
GET     /projects                                   @org.maproulette.controllers.api.ProjectController.list(limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= false)
###
# tags: [ Project ]
# summary: List all the managed projects.
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Lists all the managed projects in the system for the authenticated user
# responses:
#   '200':
#     description: A list of all the projects
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Project'
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Flag to set if only wanting enabled projects returned. Default value is true.
#   - name: onlyEnabled
#     in: query
#     description: Whether to only returned projects that are enabled or all of them. By default set to false and returns all of them
#   - name: onlyOwned
#     in: query
#     description: Whether to only returned projects that are owned by this user. By default set to false and returns all of them
#   - name: searchString
#     in: query
#     description: A simple search string that will filter out for a specific set of projects matching the search string.
#   - name: sort
#     in: query
#     description: The column to sort by. Default column is "display_name"
###
GET     /projects/managed                           @org.maproulette.controllers.api.ProjectController.listManagedProjects(limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= false, onlyOwned:Boolean ?= false, searchString:String ?= "", sort:String ?= "display_name")
###
# tags: [ Project ]
# summary: List all the projects challenges.
# produces: [ application/json ]
# description: Lists all the challenges that are children of the supplied project.
# responses:
#   '200':
#     description: A list of all the challenges
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
# parameters:
#   - name: id
#     in: path
#     description: The project ID.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /project/:id/challenges                     @org.maproulette.controllers.api.ProjectController.listChildren(id:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Project ]
# summary: Create challenges for project
# consumes: [ application/json ]
# description: Creates one or more challenges as child objects under the supplied project.
#               Like the create method for the project, any challenges can contain the key "children"
#               to subsequently create tasks within that child challenge as well. For any challenges
#               that contain the "id" field, it will attempt to look for the existing challenge and
#               update it. If no challenge found with provided ID in challenge json object, then the
#               field will be ignored and a new challenge will be created.
# responses:
#   '304':
#     description: No Content, just a successful creation when getting this message
#   '400':
#     description: Invalid json payload for Challenge children. It is required that the body is a JSON array.
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project where all the children are being created.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON array with challenges, include the key "children" to create or update Task children objects within the challenge object.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
###
POST    /project/:id/challenges                     @org.maproulette.controllers.api.ProjectController.createChildren(id:Long)
###
# tags: [ Project ]
# summary: Create challenges for project
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Creates one or more challenges as child objects under the supplied project.
#               Like the create method for the project, any challenges can contain the key "children"
#               to subsequently create tasks within that child challenge as well. For any challenges
#               that contain the "id" field, it will attempt to look for the existing challenge and
#               update it. If no challenge found with provided ID in challenge json object, then the
#               field will be ignored and a new challenge will be created.
#               *NOTE* This call functions exactly the same as the POST request.
# responses:
#   '200':
#     description: The project
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project where all the children are being created.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON array with challenges, include the key "children" to create or update Task children objects within the challenge object.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
###
PUT     /project/:id/challenges                     @org.maproulette.controllers.api.ProjectController.updateChildren(id:Long)
###
# tags: [ Project ]
# summary: Retrieves children for project
# produces: [ application/json ]
# description: Retrieves all the children for a project in an expanded list. Unlike the GET
#               request /project/{id}/challenges, this function will wrap the json array list
#               inside of the parent Project object, so that you see the full hierarchy. It will
#               not however include the children Tasks of the challenges.
# responses:
#   '200':
#     description: The project will all the children Challenge objects of the project in a JSON array in the key "children"
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Project'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /project/:id/children                       @org.maproulette.controllers.api.ProjectController.expandedList(id:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Project ]
# summary: Add Challenge to a virtual Project
# produces: [ application/json ]
# description: Will add a challenge into a virtual project
# responses:
#   '200':
#     description: Empty status body
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Project'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#   - name: projectId
#     in: path
#     description: The ID of the project you are adding the challenge to.
###
POST     /project/:projectId/challenge/:id/add           @org.maproulette.controllers.api.VirtualProjectController.addChallenge(projectId:Long, id:Long)
###
# tags: [ Project ]
# summary: Remove Challenge from a virtual Project
# produces: [ application/json ]
# description: Will remove a challenge from a virtual project
# responses:
#   '200':
#     description: Empty status body
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Project'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#   - name: projectId
#     in: path
#     description: The ID of the project you are removeing the challenge from.
###
POST     /project/:projectId/challenge/:id/remove           @org.maproulette.controllers.api.VirtualProjectController.removeChallenge(projectId:Long, id:Long)
###
# tags: [ Project ]
# summary: Retrieves random Task
# produces: [ application/json ]
# description: Retrieves a random Task based on the search criteria and contained within the current project
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project limiting the tasks to only a descendent of that project.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /project/:id/tasks                          @org.maproulette.controllers.api.ProjectController.getRandomTasks(id:Long, limit:Int ?= 1, proximity:Long ?= -1)
###
# tags: [ Task ]
# summary: Retrieves a history for the task
# produces: [ application/json ]
# description: Retrieves list of task history log entries. This includes comments,
#              status actions, and review actions.
# responses:
#   '200':
#     description: List of log entries
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task
###
GET     /task/:id/history                       @org.maproulette.controllers.api.TaskHistoryController.getTaskHistoryLog(id:Long)
###
# tags: [ Review ]
# summary: Retrieves and claims a review needed Task
# produces: [ application/json ]
# description: Retrieves a Task and claims that task for review
# responses:
#   '200':
#     description: The task
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task to fetch and claim
###
GET     /task/:id/review/start                       @org.maproulette.controllers.api.TaskReviewController.startTaskReview(id:Long)
###
# tags: [ Review ]
# summary: Cancels a claim on a task for review
# produces: [ application/json ]
# description: Cancels a claim on a task for review
# responses:
#   '200':
#     description: The task
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task to cancel claim on
###
GET     /task/:id/review/cancel                       @org.maproulette.controllers.api.TaskReviewController.cancelTaskReview(id:Long)
###
# tags: [ Review ]
# summary: Retrieves tasks that need review
# produces: [ application/json ]
# description: Retrieves list of Tasks and total count
# responses:
#   '200':
#     description: The list of tasks that need review (and that the user has group permission to access)
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is -1 (all).
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
###
GET     /tasks/review                          @org.maproulette.controllers.api.TaskReviewController.getReviewRequestedTasks(startDate: String ?= null, endDate: String ?= null, onlySaved: Boolean ?= false, limit:Int ?= -1, page:Int ?= 0, sort:String ?= "", order:String ?= "ASC", excludeOtherReviewers: Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves reviewed tasks that have been reviewed either by this user or where the user requested
#          the review.
# produces: [ application/json ]
# description: Retrieves list of Tasks
# responses:
#   '200':
#     description: The list of tasks and total count
#     description: The list of tasks
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: mappers
#     in: query
#     description: The mapper ids to search by. (review_requested_by)
#   - name: reviewers
#     in: query
#     description: The reviewer ids to search by. (review_requested_by)
#     in: query
#     description: Whether results should be included tasks in tasks 'review requested'
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is -1 (all).
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
#   - name: r
#     in: query
#     description: The search string used to match the Reviewer names. (reviewed_by)
###
GET     /tasks/reviewed                          @org.maproulette.controllers.api.TaskReviewController.getReviewedTasks(mappers:String ?= "", reviewers:String ?= "", startDate: String ?= null, endDate: String ?= null, allowReviewNeeded:Boolean ?= false, limit:Int ?= 10, page:Int ?= 0, sort:String ?= "", order:String ?= "ASC")
###
# tags: [ Review ]
# summary: Retrieves and claims a the next review needed Task
# produces: [ application/json ]
# description: Retrieves the next Task (given the search parameters) and claims that task for review
# responses:
#   '200':
#     description: The task
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: lastTaskId
#     in: query
#     description: Fetch the next task after the lastTaskId. (so if you want to 'skip' a task you can get the next one)
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
#   - name: r
#     in: query
#     description: The search string used to match the Reviewer names. (reviewed_by)
###
GET     /tasks/review/next                       @org.maproulette.controllers.api.TaskReviewController.nextTaskReview(onlySaved:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", lastTaskId:Long ?= -1, excludeOtherReviewers:Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves tasks that need review
# produces: [ application/json ]
# description: Retrieves list of Tasks and total count
# responses:
#   '200':
#     description: The list of tasks that need review (and that the user has group permission to access)
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: reviewTasksType
#     in: query
#     description: integer value > 1 - To Be Reviewed 2 - User's reviewed Tasks 3 - All reviewed by users
#   - name: mappers
#     in: query
#     description: the mapper ids to search by (review_requested_by)
#   - name: reviewers
#     in: query
#     description: the reviewer ids to search by (reviewed_by)
#   - name: priorities
#     in: query
#     description: the priorities to search by
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
###
GET     /tasks/review/metrics                          @org.maproulette.controllers.api.TaskReviewController.getReviewMetrics(reviewTasksType: Int, mappers: String ?= "", reviewers: String ?= "", priorities:String ?= "", startDate: String ?= null, endDate: String ?= null, onlySaved:Boolean ?= false, excludeOtherReviewers: Boolean ?= false)
###
# tags: [ Project ]
# summary: Retrieves clustered challenge points
# produces: [ application/json ]
# description: Retrieves all the challenges for a specific project as clustered points to potentially display on a map
# responses:
#   '200':
#     description: The clustered point representation for a Challenge. If none found will return an empty list
#     schema:
#       $ref: '#/definitions/org.maproulette.models.ClusteredPoint'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: challenges
#     in: query
#     description: The challenge search string. Retrieve only challenge clustered points that have the search string contained within the challenge name. Match is case insensitive.
###
GET     /project/clustered/:id                      @org.maproulette.controllers.api.ProjectController.getClusteredPoints(id:Long, challenges:String ?= "")
###
# tags: [ Project ]
# summary: Retrieves clustered challenge points
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Retrieves all the challenges as clustered points to potentially display on a map
# responses:
#   '200':
#     description: The clustered point representation for a Challenge. If none found will return an empty list
#     schema:
#       $ref: '#/definitions/org.maproulette.models.ClusteredPoint'
# parameters:
#   - name: search
#     in: query
#     description: The challenge search parameters. This is a URL encoded JSON object containing multiple different search parameters.
###
GET     /project/search/clustered                   @org.maproulette.controllers.api.ProjectController.getSearchedClusteredPoints(search ?= "")
###
# tags: [ Project ]
# summary: Retrieve all comments for Project
# description: This will retrieve all the comments of the descendent tasks of a given Project
# response:
#   '200':
#     description: A list of comments of the descendent tasks of a given Project
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Comment'
#   '404':
#     description: No Project with provided ID found
# parameters:
#   - name: id
#     in: path
#     description: The ID of the project
#     required: true
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /project/:id/comments                     @org.maproulette.controllers.api.ProjectController.retrieveComments(id:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Challenge ]
# summary: Create a Challenge
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create a new challenge from the supplied JSON in the body.
#               When creating a Challenge object you can within the same json body include Task
#               children under the "children" key. When creating the Challenge, leave the ID field
#               out of the body json, if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Challenge with a unique id.
#                   The Challenge object is flattened so the "general", "creation", "priority", and "extra"
#                   fields are remove and the keys from that object are moved into the challenge object
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '304':
#     description: Not updated responding with empty payload if Challenge already exists and nothing to update
#   '400':
#     description: Invalid json payload for Challenge
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Challenge body, include the key "children" to create Task children objects.
#                   Although the model schema shows a hierarchy include "general", "creation", "priority" and "extra" this
#                   JSON structure can be flatten and you can exclude those top level keys and have the children in the root level.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
###
POST    /challenge                                  @org.maproulette.controllers.api.ChallengeController.create
###
# tags: [ Challenge ]
# summary: Create a batch of Challenges
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create multiple new challenges from the JSONArray supplied in the body. Each JSON object
#               is basically a challenges object that is processed similarly to the singular /challenge POST. If
#               challenges already exist with the name, they will simply be skipped, ie. not updated.
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Challenge already exists and nothing to update
#   '400':
#     description: Invalid json payload for Challenge
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the challenge body, include the key "children" a Challenge JSON object within the array to create Task children objects.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
###
POST    /challenges                                 @org.maproulette.controllers.api.ChallengeController.batchUploadPost
###
# tags: [ Challenge ]
# summary: Updates a Challenge
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update an already existing challenge from the supplied JSON in the body.
#               When updating the Challenge object you can within the same json body include Task
#               children under the "children" key.
# responses:
#   '200':
#     description: The updated JSON Challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '304':
#     description: Not updated responding with empty payload if Challenge already exists and nothing to update
#   '400':
#     description: Invalid json payload for Challenge
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Challenge that is being updated
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Challenge body, include the key "children" to create or update Task children objects.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
###
PUT     /challenge/:id                              @org.maproulette.controllers.api.ChallengeController.update(id:Long)
###
# tags: [ Challenge ]
# summary: Update a batch of Challenges
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update multiple already existing Challenges from the JSONArray supplied in the body. Each JSON object
#               is basically a Challenge object that is processed similarly to the singular /challenge POST. If a project
#               does not exist it will be created from scratch
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Challenge already exists and nothing to update
#   '400':
#     description: Invalid json payload for Challenge
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Challenge body, include the key "children" in a Challenge JSON object within the array to create Task children objects.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
###
PUT     /challenges                                 @org.maproulette.controllers.api.ChallengeController.batchUploadPut
###
# tags: [ Challenge ]
# summary: Retrieves an already existing Challenge
# produces: [ application/json ]
# description: Retrieves an already existing Challenge based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '404':
#     description: ID field supplied but no object found matching the id
# parameters:
#   - name: id
#     description: The id of the Challenge to retrieve
###
GET     /challenge/:id                              @org.maproulette.controllers.api.ChallengeController.read(id:Long)
###
# tags: [ Challenge ]
# summary: Retrieves an already existing Challenge
# produces: [ application/json ]
# description: Retrieves an already existing Challenge based on the name of the Challenge rather than an ID
# responses:
#   '200':
#     description: The retrieved Challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '404':
#     description: No Challenge found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Project of the Challenge
#   - name: name
#     in: path
#     description: The name of the Challenge being retrieved
###
GET     /project/:id/challenge/:name                @org.maproulette.controllers.api.ChallengeController.readByName(id:Long, name:String)
###
# tags: [ Challenge ]
# summary: Deletes an existing Challenge
# description: Deletes an existing Challenge based on the supplied ID. This will delete all children Tasks under the Challenge.
# responses:
#   '200':
#     description: A status message containing the ID of the Challenge that was just deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Challenge found matching the provided id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Challenge being deleted
#   - name: immediate
#     in: query
#     description: If set to true, will delete the virtual challenge immediately instead of delayed
#     default: false
#     type: boolean
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /challenge/:id                              @org.maproulette.controllers.api.ChallengeController.delete(id:Long, immediate:Boolean ?= false)
###
# tags: [ Challenge ]
# summary: Undeletes a Challenge
# description: If a Challenge has been setup for deletion and not removed from the database we can undelete it and make it so that it does not get deleted anymore.
# responses:
#   '200':
#     description: The Challenge that was undeleted.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Challenge found matching the provided id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Project being deleted
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
PUT  /challenge/:id/undelete                         @org.maproulette.controllers.api.ChallengeController.undelete(id:Long)
###
# tags: [ Challenge ]
# summary: Deletes all Challenge Tasks
# description: Deletes all the existing tasks within a challenge. This API will also give the option to delete tasks based on the tasks current status.
#               So can delete all "false positive" tasks, or all "fixed and created" tasks.
# responses:
#   '200':
#     description: Empty Ok stating that it completed successfully
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Challenge found matching the provided id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Challenge being deleted
#   - name: statusFilters
#     in: query
#     description: A comma separated list of status ID's. 0 = Created, 1 = Fixed, 2 = False Positive, 3 = Skipped, 4 = Deleted, 5 = Already Fixed, 6 = Too Hard
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /challenge/:id/tasks                        @org.maproulette.controllers.api.ChallengeController.deleteTasks(id:Long, statusFilters ?= "")
###
# tags: [ Challenge ]
# summary: Find Challenge matching search criteria
# produces: [ application/json ]
# description: Finds a list of Challenges that match a specific search criteria. The search criteria is simply a string that is contained in the Challenge name. String case sensitivity is ignored.
# responses:
#   '200':
#     description: A list of Challenges found
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
# parameters:
#   - name: q
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match everything.
#   - name: parentId
#     in: query
#     description: This field will be ignored for this request
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Flag to set if only wanting enabled Challenges returned. Default value is true.
###
GET     /challenges/find                            @org.maproulette.controllers.api.ChallengeController.find(q:String ?= "", parentId:Long ?= -1, limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
###
# tags: [ Challenge ]
# summary: Extended Find Challenge matching search criteria
# produces: [ application/json ]
# description: Finds a list of Challenges that match a specific search criteria. The search criteria is uses multiple values from the query string
# responses:
#   '200':
#     description: A list of Challenges found
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
# parameters:
#   - name: pid
#     in: query
#     description: The id of the project to limit your search too
#   - name: ps
#     in: query
#     description: The search string used to match the project names. Default value is empty string, ie. will match all projects.
#   - name: pe
#     in: query
#     description: Boolean variable true|false that limits the search by enabled projects only if set to true. Default will is true.
#   - name: ct
#     in: query
#     description: Comma separated list of tags to limit the returned challenges by
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: ce
#     in: query
#     description: Boolean variable true|false that limits the search by enabled projects only if set to true. Default will is true.
#   - name: cd
#     in: query
#     description: The difficulty level to limit the returned challenges by. Following difficulty Integers can be used. 1 - Easy, 2 - Normal, 3 - Expert, -1 - Any difficulty. Default value is -1.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
###
GET     /challenges/extendedFind                    @org.maproulette.controllers.api.ChallengeController.extendedFind(limit:Int ?= 10, page:Int ?= 0, sort:String ?= "", order:String ?= "ASC")
###
# tags: [ Challenge ]
# summary: List challenges in specified projects
# produces: [ application/json ]
# description: Retrieves a lightweight listing of challenges, with just a few basic fields for each, that belong to the specified project(s).
# responses:
#   '200':
#     description: A listing of challenges containing a few basic fields for each.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.ChallengeListing'
# parameters:
#   - name: projectIds
#     in: query
#     description: Comma-separated list of project ids for which child challenges are desired. Default value is empty string, ie. all projects.
#   - name: parentId
#     in: query
#     description: This field will be ignored for this request
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Flag to set if only wanting enabled Challenges returned. Default value is true.
###
GET     /challenges/listing                         @org.maproulette.controllers.api.ChallengeController.listing(projectIds:String ?= "", limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
###
# tags: [ Challenge ]
# summary: Move Challenge to another Project
# produces: [ application/json ]
# description: Will move a challenge into another project
# responses:
#   '200':
#     description: Empty status body
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#   - name: projectId
#     in: path
#     description: The ID of the project you are moving the challenge too.
###
POST     /challenge/:id/project/:projectId           @org.maproulette.controllers.api.ChallengeController.moveChallenge(projectId:Long, id:Long)
###
# tags: [ Challenge ]
# summary: Retrieve tags for Challenge
# produces: [ application/json ]
# description: Retrieves all the Tags that have been added to the specified Challenge
# responses:
#   '200':
#     description: A list of Tags associated with the Challenge. Empty array if not found.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
###
GET     /challenge/:id/tags                         @org.maproulette.controllers.api.ChallengeController.getTagsForChallenge(id:Long)
###
# tags: [ Challenge ]
# summary: Retrieve challenges based on provided tags
# produces: [ application/json ]
# description: Retrieves all the challenges that contain at least one of the supplied tags.
# responses:
#   '200':
#     description: A list of Challenges that contain at least one of the supplied tags. An empty list otherwise.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
#   '400':
#     description: If not tags are supplied a BadRequest response will be returned
# parameters:
#   - name: tags
#     in: query
#     description: A comma separated list of tags
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /challenges/tags                            @org.maproulette.controllers.api.ChallengeController.getItemsBasedOnTags(tags:String ?= "", limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Challenge ]
# summary: Delete Challenge Tags
# description: Deletes all the supplied tags from the Challenge
# responses:
#   '304':
#     description: A basic 304 with NoContent will be returned on a successful delete
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#   - name: tags
#     in: query
#     description: A comma separated list of tags
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /challenge/:id/tags                         @org.maproulette.controllers.api.ChallengeController.deleteTagsFromItem(id:Long, tags:String ?= "")
###
# tags: [ Challenge ]
# summary: Featured Challenges.
# produces: [ application/json ]
# description: Get all the currently featured challenges
# responses:
#   '200':
#     description: A list of all the featured Challenges
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /challenges/featured                        @org.maproulette.controllers.api.ChallengeController.getFeaturedChallenges(limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Challenge ]
# summary: Hottest Challenges.
# produces: [ application/json ]
# description: Get the hottest (recently popular) challenges
# responses:
#   '200':
#     description: A list of all the hottest Challenges in order of recent popularity
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /challenges/hot                             @org.maproulette.controllers.api.ChallengeController.getHotChallenges(limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Challenge ]
# summary: Preferred Challenges.
# produces: [ application/json ]
# description: Get the preferred challenges which include popular, featured, and newest
# responses:
#   '200':
#     description: A map of each list challenge types ("popular":[], "featured":[], "newest":[])
#     schema:
#       type: object
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in each category. Default value is 10.
###
GET     /challenges/preferred                             @org.maproulette.controllers.api.ChallengeController.getPreferredChallenges(limit:Int ?= 10)
###
# tags: [ Challenge ]
# summary: List all the Challenges.
# produces: [ application/json ]
# description: Lists all the Challenges in the system
# responses:
#   '200':
#     description: A list of all the Challenges
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Only retrieve challenges that are enabled, default is false.
###
GET     /challenges                                 @org.maproulette.controllers.api.ChallengeController.list(limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= false)
###
# tags: [ Challenge ]
# summary: List all the Challenges Tasks.
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Lists all the Tasks that are children of the supplied Challenge.
# responses:
#   '200':
#     description: A list of all the Tasks
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The project ID.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /challenge/:id/tasks                        @org.maproulette.controllers.api.ChallengeController.listChildren(id:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Challenge ]
# summary: Create Tasks for Challenge
# consumes: [ application/json ]
# description: Creates one or more Tasks as child objects under the supplied Challenge. For any Tasks
#               that contain the "id" field, it will attempt to look for the existing Task and
#               update it. If no Task found with provided ID in Task json object, then the
#               field will be ignored and a new Task will be created.
# responses:
#   '304':
#     description: No Content, just a successful creation when getting this message
#   '400':
#     description: Invalid json payload for Task children. It is required that the body is a JSON array.
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge where all the children are being created.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON array with Tasks.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
###
POST    /challenge/:id/tasks                        @org.maproulette.controllers.api.ChallengeController.createChildren(id:Long)
###
# tags: [ Challenge ]
# summary: Create Tasks for Challenge
# consumes: [ application/json ]
# description: Creates one or more Tasks as child objects under the supplied Challenge. For any Tasks
#               that contain the "id" field, it will attempt to look for the existing Task and
#               update it. If no Task found with provided ID in Task json object, then the
#               field will be ignored and a new Task will be created.
#               *NOTE* This PUT request works exactly the same as the equivalent POST request
# responses:
#   '304':
#     description: No Content, just a successful creation when getting this message
#   '400':
#     description: Invalid json payload for Task children. It is required that the body is a JSON array.
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge where all the children are being created.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON array with Tasks.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
###
PUT     /challenge/:id/tasks                        @org.maproulette.controllers.api.ChallengeController.updateChildren(id:Long)
###
# tags: [ Challenge ]
# summary: Add tasks to a challenge
# consumes: [ application/json ]
# description: This will create tasks within a challenge based on the provided geojson in the body of the PUT request
# responses:
#   '304':
#     description: No Content, just a successful creation when getting this message
#   '400':
#     description: Invalid json payload. It is required that the body is JSON.
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge where all the children are being created.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The geojson to build the tasks from.
#     required: true
###
PUT     /challenge/:id/addTasks                     @org.maproulette.controllers.api.ChallengeController.addTasksToChallenge(id:Long)
###
# tags: [ Challenge ]
# summary: Add tasks to a challenge
# consumes: [ application/json ]
# description: This will create tasks within a challenge based on the provided file uploaded as part of the PUT request.
# responses:
#   '304':
#     description: No Content, just a successful creation when getting this message
#   '400':
#     description: Invalid json payload. It is required that the file is JSON.
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge where all the children are being created.
#   - name: lineByLine
#     in: query
#     description: If the JSON provided includes seperate GeoJSON on each line, then this must be true
#   - name: removeUnmatched
#     in: query
#     description: Used to remove incomplete tasks that have been addressed
#                  externally since the last rebuild, assuming the source data
#                  represents all tasks outstanding. If set to true, all
#                  existing tasks in CREATED or SKIPPED status (only) will be
#                  removed prior to rebuilding with the assumption that they
#                  will be recreated if they still appear in the updated source
#                  data. If set to false, unmatched existing tasks are simply
#                  left as-is.
#     default: false
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The geojson to build the tasks from.
#     required: true
###
PUT     /challenge/:id/addFileTasks                 @org.maproulette.controllers.api.ChallengeController.addTasksToChallengeFromFile(id:Long, lineByLine:Boolean ?= true, removeUnmatched:Boolean ?= false, dataOriginDate:Option[String])
###
# tags: [ Challenge ]
# summary: Retrieves children for Challenge
# produces: [ application/json ]
# description: Retrieves all the children for a Challenge in an expanded list. Unlike the GET
#               request /challenge/{id}/tasks, this function will wrap the json array list
#               inside of the parent Challenge object, so that you see the full hierarchy.
# responses:
#   '200':
#     description: The Challenge with all the Task Challenge objects of the Challenge in a JSON array in the key "children"
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /challenge/:id/children                     @org.maproulette.controllers.api.ChallengeController.expandedList(id:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Challenge ]
# summary: Clones a Challenge
# produces: [ application/json ]
# description: Clones a challenge
# responses:
#   '200':
#     description: The newly created cloned challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '401':
#     description: The user is not authorized to make this request\
#   '404':
#     description: No Challenge found matching the provided id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Challenge to clone.
#   - name: name
#     in: path
#     description: The name of the new challenge
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
PUT     /challenge/:id/clone/:name                  @org.maproulette.controllers.api.ChallengeController.cloneChallenge(id:Long, name:String)
###
# tags: [ Challenge ]
# summary: Rebuild a Challenge
# produces: [ application/json ]
# description: Rebuilds a challenge that was originally built by an overpass query or remote geojson.
# responses:
#   '200':
#     description: Empty OK status
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Challenge found matching the provided id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Challenge to rebuild.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: removeUnmatched
#     in: query
#     description: Used to remove incomplete tasks that have been addressed
#                  externally since the last rebuild, assuming the source data
#                  represents all tasks outstanding. If set to true, all
#                  existing tasks in CREATED or SKIPPED status (only) will be
#                  removed prior to rebuilding with the assumption that they
#                  will be recreated if they still appear in the updated source
#                  data. If set to false, unmatched existing tasks are simply
#                  left as-is.
#     default: false
###
PUT     /challenge/:id/rebuild                      @org.maproulette.controllers.api.ChallengeController.rebuildChallenge(id:Long, removeUnmatched:Boolean ?= false)
###
# tags: [ Challenge ]
# summary: Retrieves random Task
# produces: [ application/json ]
# description: Retrieves a random Task based on the search criteria and contained within the current Challenge
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Challenge limiting the tasks to only a descendent of that Challenge.
#   - name: tags
#     in: query
#     description: A comma separated list of task tags. The search will only retrieve random tasks that contain those tags
#   - name: s
#     in: query
#     description: The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /challenge/:cid/tasks/random                @org.maproulette.controllers.api.ChallengeController.getRandomTasks(cid:Long, s:String ?= "", tags:String ?= "", limit:Int ?= 1, proximity:Long ?= -1)
###
# tags: [ Challenge ]
# summary: Retrieves random Task
# produces: [ application/json ]
# description: Retrieves a random Task based on the search criteria and contained within the current Challenge
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Challenge limiting the tasks to only a descendent of that Challenge.
#   - name: tags
#     in: query
#     description: A comma separated list of task tags. The search will only retrieve random tasks that contain those tags
#   - name: s
#     in: query
#     description: The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /challenge/:cid/tasks/randomTasks           @org.maproulette.controllers.api.ChallengeController.getRandomTasks(cid:Long, s:String ?= "", tags:String ?= "", limit:Int ?= 1, proximity:Long ?= -1)
###
# tags: [ Challenge ]
# summary: Retrieves nearby Tasks
# produces: [ application/json ]
# description: Retrieves tasks geographically closest to the specified task within the same Challenge
# responses:
#   '200':
#     description: The list of geographically closest tasks
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 5.
#   - name: proximity
#     in: query
#     description: Id of task around which geographically closest tasks are desired
#   - name: excludeSelfLocked
#     in: query
#     description: exclude tasks this user has locked (always excludes tasks locked by others)
###
GET     /challenge/:cid/tasksNearby/:proximityId           @org.maproulette.controllers.api.ChallengeController.getNearbyTasks(cid:Long, proximityId:Long, excludeSelfLocked:Boolean ?=false, limit:Int ?= 5)
###
# tags: [ Challenge ]
# summary: Retrieves prioritized random Task
# produces: [ application/json ]
# description: Retrieves a prioritized random Task contained within the current Challenge,
#              with higher priority tasks being returned ahead of lower priority tasks
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Challenge limiting the tasks to only a descendent of that Challenge.
#   - name: s
#     in: query
#     description: The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive.
#   - name: tags
#     in: query
#     description: A comma separated list of task tags. The search will only retrieve random tasks that contain those tags
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /challenge/:cid/tasks/prioritizedTasks      @org.maproulette.controllers.api.ChallengeController.getRandomTasksWithPriority(cid:Long, s:String ?= "", tags:String ?= "", limit:Int ?= 1, proximity:Long ?= -1)
###
# tags: [ Challenge ]
# summary: Retrieves next Task
# produces: [ application/json ]
# description: Retrieves the next sequential Task based on the task ordering within the Challenge. If it is currently on the last task it will response with the first task in the challenge.
# responses:
#   '200':
#     description: The next task in the list
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Challenge.
#   - name: id
#     in: path
#     description: The id of the current task being viewed, so that we can get context of what the next task should be
#   - name: statusList
#     in: query
#     description: A comma separated list of Task status' to limit to the response by.
###
GET     /challenge/:cid/nextTask/:id                @org.maproulette.controllers.api.ChallengeController.getSequentialNextTask(cid:Long, id:Long, statusList:String ?= "")
###
# tags: [ Challenge ]
# summary: Retrieves previous Task
# produces: [ application/json ]
# description: Retrieves the previous sequential Task based on the task ordering within the Challenge. If it is currently on the first task it will response with the last task in the challenge.
# responses:
#   '200':
#     description: The previous task in the list
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Challenge.
#   - name: id
#     in: path
#     description: The id of the current task being viewed, so that we can get context of what the next task should be
#   - name: statusList
#     in: query
#     description: A comma separated list of Task status' to limit to the response by.
###
GET     /challenge/:cid/previousTask/:id            @org.maproulette.controllers.api.ChallengeController.getSequentialPreviousTask(cid:Long, id:Long, statusList:String ?= "")
###
# tags: [ Challenge ]
# summary: Retrieves Challenge GeoJSON
# produces: [ application/json ]
# description: Retrieves the GeoJSON for the Challenge that represents all the Task children of the Challenge.
# responses:
#   '200':
#     description: Standard GeoJSON Challenge Geometry
#   '404':
#     description: ID field supplied but no object found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge limiting the tasks to only a descendent of that Challenge.
#   - name: status
#     in: query
#     description: Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
#   - name: priority
#     in: query
#     description: Can filter the Tasks returned by the priority of the Task. 0 - High, 1 - Medium, 2 - Low
#   - name: reviewStatus
#     in: query
#     description: Can filter the Tasks returned by the reviewStatus of the Task. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted, 4 - Disputed
###
GET     /challenge/view/:id                         @org.maproulette.controllers.api.ChallengeController.getChallengeGeoJSON(id:Long, status:String ?= "", reviewStatus:String ?= "", priority:String ?= "")
###
# tags: [ Challenge ]
# summary: Retrieves clustered Task points
# produces: [ application/json ]
# description: Retrieves all the Tasks for a specific Challenge as clustered points to potentially display on a map
# responses:
#   '200':
#     description: An array of clustered point representations for a Task. If none found will return an empty list
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.ClusteredPoint'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: filter
#     in: query
#     description: Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
###
GET     /challenge/clustered/:id                    @org.maproulette.controllers.api.ChallengeController.getClusteredPoints(id:Long, filter:String ?= "", limit:Int ?= 2500, excludeLocked:Boolean ?= false)
###
# tags: [ Challenge ]
# summary: Update Task Priorities
# produces: [ application/json ]
# description: Updates all the Task priorities in a Challenge based on the priority rules setup in the Challenge
# responses:
#   '200':
#     description: A simple OK status.
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
PUT     /challenge/:id/updateTaskPriorities         @org.maproulette.controllers.api.ChallengeController.updateTaskPriorities(id:Long)
###
# tags: [ Challenge ]
# summary: Reset Task Instructions
# description: This will reset all the task instructions so that the task instructions revert to the Challenge instruction.
# responses:
#   '200':
#     description: A simple OK status.
#   '400':
#     description: If the Challenge does not contain any instructions, then it will not revert the task instructions
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The Challenge for the supplied ID was not found
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
PUT     /challenge/:id/resetTaskInstructions        @org.maproulette.controllers.api.ChallengeController.resetTaskInstructions(id:Long)
###
# tags: [ Challenge ]
# summary: Retrieve all comments for Challenge
# description: This will retrieve all the comments for all the children tasks of a given challenge
# response:
#   '200':
#     description: A list of comments for that challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Comment'
#   '404':
#     description: No Challenge with provided ID found
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#     required: true
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /challenge/:id/comments                     @org.maproulette.controllers.api.ChallengeController.retrieveComments(id:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Challenge ]
# summary: Retrieve all comments for Challenge
# description: This will retrieve all the comments for all the children tasks of a given challenge and respond with a csv
# response:
#   '200':
#     description: A CSV file containing the following data "ProjectID,ChallengeID,TaskID,OSM_UserID,OSM_Username,Comments,TaskLink"
#   '404':
#     description: No Challenge with provided ID found
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#     required: true
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /challenge/:id/comments/extract             @org.maproulette.controllers.api.ChallengeController.extractComments(id:Long, limit:Int ?= -1, page:Int ?= 0)
###
# tags: [ Challenge ]
# summary: Retrieve summaries of all tasks for Challenge
# description: This will retrieve summaries of all the tasks of a given challenge and respond with a csv
# response:
#   '200':
#     description: A CSV file containing the following data "TaskID,ChallengeID,TaskName,TaskStatus,TaskPriority,Username"
#   '404':
#     description: No Challenge with provided ID found
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#     required: true
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: status
#     in: query
#     description: Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
#   - name: priority
#     in: query
#     description: Can filter the Tasks returned by the priority of the Task. 0 - High, 1 - Medium, 2 - Low
#   - name: reviewStatus
#     in: query
#     description: Can filter the Tasks returned by the reviewStatus of the Task. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted, 4 - Disputed
###
GET     /challenge/:id/tasks/extract             @org.maproulette.controllers.api.ChallengeController.extractTaskSummaries(id:Long, limit:Int ?= -1, page:Int ?= 0, status:String ?= "", reviewStatus:String ?= "", priority:String ?= "")
###
# tags: [ Project ]
# summary: Retrieve summaries of all tasks in a Project
# description: This will retrieve summaries of all the tasks of a given project and respond with a csv
# response:
#   '200':
#     description: A CSV file containing the following data "TaskID,ChallengeID,TaskName,TaskStatus,TaskPriority,Username"
#   '404':
#     description: No Project with provided ID found
# parameters:
#   - name: projectId
#     in: path
#     description: The ID of the project
#     required: true
#   - name: cId
#     in: query
#     description: A list of challengeIds to include. If not provided, then all challenges in the project are used.
#     required: optional
###
GET     /project/:projectId/tasks/extract             @org.maproulette.controllers.api.ChallengeController.extractAllTaskSummaries(projectId:Long, cId:Option[String])
###
# tags: [ Challenge ]
# summary: Match OSM Changesets
# description: This will go through every task and try to match an OSM changeset with the task
# response:
#   '200':
#     description: Will always return Ok unless not authenticated
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Challenge with provided ID found
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#     required: true
#   - name: skipSet
#     in: query
#     description: Will skip any tasks if the changesets are already set if this is set to true
#     default: false
###
GET     /challenge/:id/matchChangesets          @org.maproulette.controllers.api.ChallengeController.matchChangeSets(id:Long, skipSet:Boolean ?= false)
###
# tags: [ Challenge ]
# summary: Create Challenge from Github
# description: This will pull the following files from Github, ${name}_create.json, ${name}_geojson.json, ${name}_info.md, and create a Challenge from it. The create file will be the json used to create the challenge. Similarly to if you supplied json in the create method. The info.md file is just an informational file that can be used later for challenge information to the user. And geojson.json which is used to generate the tasks. If the challenge has been previously created, it will just update the tasks from the geojson
# response:
#   '200':
#     description: The retrieved Challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Project with provided ID found
# parameters:
#   - name: id
#     in: path
#     description: The ID of the parent project
#     required: true
#   - name: username
#     in: path
#     description: username of the github user that owns the repo
#     required: true
#   - name: repo
#     in: path
#     description: Github repositories that contains the challenge files
#     required: true
#   - name: name
#     in: path
#     description: The name of the challenge that prefixes all the github files
#     required: true
###
POST     /project/:projectId/challenge/:username/:repo/:name   @org.maproulette.controllers.api.ChallengeController.createFromGithub(projectId:Long, username:String, repo:String, name:String, rebuild:Boolean ?= false)
###
# tags: [ Challenge ]
# summary: Extracts a Challenge Package
# description: This will retrieve a package of the challenge, which will contain json to recreate the challenge, geojson to recreate the tasks, info page in md format if any, all the comments extracted from for the challenge and any metrics and the time the challenge was extracted.
# response:
#   '200':
#     description: A gzipped file containing a package of the challenge
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No project with provided ID found
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#     required: true
###
GET     /challenge/:id/extract                      @org.maproulette.controllers.api.ChallengeController.extractPackage(id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Create a Virtual Challenge
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create a new Virtual Challenge from the supplied JSON in the body.
#               When creating the Virtual Challenge, leave the ID field out of the body json,
#               if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Virtual Challenge with a unique id.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.VirtualChallenge'
#   '304':
#     description: Not updated responding with empty payload if Virtual Challenge already exists and nothing to update
#   '400':
#     description: Invalid json payload for Virtual Challenge
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Virtual Challenge body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.VirtualChallenge'
###
POST    /virtualchallenge                           @org.maproulette.controllers.api.VirtualChallengeController.create
###
# tags: [ Virtual Challenge ]
# summary: Updates a Virtual Challenge
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update an already existing Virtual Challenge from the supplied JSON in the body.
# responses:
#   '200':
#     description: The updated JSON Virtual Challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.VirtualChallenge'
#   '304':
#     description: Not updated responding with empty payload if Virtual Challenge already exists and nothing to update
#   '400':
#     description: Invalid json payload for Virtual Challenge
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Virtual Challenge that is being updated
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Virtual Challenge body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
###
PUT     /virtualchallenge/:id                       @org.maproulette.controllers.api.VirtualChallengeController.update(id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves an already existing Virtual Challenge
# produces: [ application/json ]
# description: Retrieves an already existing Virtual Challenge based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Virtual Challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.VirtualChallenge'
#   '404':
#     description: ID field supplied but no object found matching the id
# parameters:
#   - name: id
#     description: The id of the Virtual Challenge to retrieve
###
GET     /virtualchallenge/:id                              @org.maproulette.controllers.api.VirtualChallengeController.read(id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves an already existing Virtual Challenge
# produces: [ application/json ]
# description: Retrieves an already existing Virtual Challenge based on the name of the Virtual Challenge rather than an ID
# responses:
#   '200':
#     description: The retrieved Virtual Challenge
#     schema:
#       $ref: '#/definitions/org.maproulette.models.VirtualChallenge'
#   '404':
#     description: No Virtual Challenge found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Project of the Virtual Challenge
#   - name: name
#     in: path
#     description: The name of the Virtual Challenge being retrieved
###
GET     /virtualchallengebyname/:name                   @org.maproulette.controllers.api.VirtualChallengeController.readByName(id:Long ?= -1, name:String)
###
# tags: [ Virtual Challenge ]
# summary: Deletes an existing Virtual Challenge
# description: Deletes an existing Virtual Challenge based on the supplied ID. This will delete all associated Tasks of the Virtual Challenge.
# responses:
#   '200':
#     description: A status message containing the ID of the Virtual Challenge that was just deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Virtual Challenge found matching the provided id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Virtual Challenge being deleted
#   - name: immediate
#     in: query
#     description: If set to true, will delete the virtual challenge immediately instead of delayed
#     default: false
#     type: boolean
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /virtualchallenge/:id                           @org.maproulette.controllers.api.VirtualChallengeController.delete(id:Long, immediate:Boolean ?= true)
###
# tags: [ Virtual Challenge ]
# summary: List all the Virtual Challenge.
# produces: [ application/json ]
# description: Lists all the Virtual Challenges in the system
# responses:
#   '200':
#     description: A list of all the Virtual Challenges
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.VirtualChallenge'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /virtualchallenges                              @org.maproulette.controllers.api.VirtualChallengeController.list(limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= false)
###
# tags: [ Virtual Challenge ]
# summary: List all the Virtual Challenges Tasks.
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Lists all the Tasks that are children of the supplied Virtual Challenge.
# responses:
#   '200':
#     description: A list of all the Tasks
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The project ID.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /virtualchallenge/:id/tasks                     @org.maproulette.controllers.api.VirtualChallengeController.listTasks(id:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves random Task
# produces: [ application/json ]
# description: Retrieves a random Task based on the search criteria and contained within the current Virtual Challenge
# responses:
#   '200':
#     description: The task if any is found
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the Virtual Challenge limiting the tasks to only a descendent of that Virtual Challenge.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /virtualchallenge/:cid/task                 @org.maproulette.controllers.api.VirtualChallengeController.getRandomTask(cid:Long, proximity:Long ?= -1)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves next Task
# produces: [ application/json ]
# description: Retrieves the next sequential Task based on the task ordering within the Virtual Challenge. If it is currently on the last task it will response with the first task in the Virtual Challenge.
# responses:
#   '200':
#     description: The next task in the list
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Virtual Challenge.
#   - name: id
#     in: path
#     description: The id of the current task being viewed, so that we can get context of what the next task should be
###
GET     /virtualchallenge/:cid/nextTask/:id         @org.maproulette.controllers.api.VirtualChallengeController.getSequentialNextTask(cid:Long, id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves previous Task
# produces: [ application/json ]
# description: Retrieves the previous sequential Task based on the task ordering within the Virtual Challenge. If it is currently on the first task it will response with the last task in the Virtual Challenge.
# responses:
#   '200':
#     description: The previous task in the list
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Virtual Challenge.
#   - name: id
#     in: path
#     description: The id of the current task being viewed, so that we can get context of what the next task should be
###
GET     /virtualchallenge/:cid/previousTask/:id     @org.maproulette.controllers.api.VirtualChallengeController.getSequentialPreviousTask(cid:Long, id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves Virtual Challenge GeoJSON
# produces: [ application/json ]
# description: Retrieves the GeoJSON for the Virtual Challenge that represents all the associated Tasks of the Virtual Challenge.
#               WARNING* This API query can be quite slow due to retrieving all the points that is grouped in various different challenges
# responses:
#   '200':
#     description: Standard GeoJSON Virtual Challenge Geometry
#   '404':
#     description: ID field supplied but no object found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Virtual Challenge limiting the tasks to only a descendent of that Virtual Challenge.
#   - name: filter
#     in: query
#     description: Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
###
GET     /virtualchallenge/view/:id                  @org.maproulette.controllers.api.VirtualChallengeController.getVirtualChallengeGeoJSON(id:Long, filter:String ?= "")
###
# tags: [ Virtual Challenge ]
# summary: Retrieves clustered Task points
# produces: [ application/json ]
# description: Retrieves all the Tasks for a specific Virtual Challenge as clustered points to potentially display on a map.
# responses:
#   '200':
#     description: An array of clustered point representations for a Task. If none found will return an empty list
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.ClusteredPoint'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: filter
#     in: query
#     description: Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
###
GET     /virtualchallenge/clustered/:id             @org.maproulette.controllers.api.VirtualChallengeController.getClusteredPoints(id:Long, filter:String ?= "")
###
# tags: [ Virtual Challenge ]
# summary: Retrieves nearby Tasks in Virtual Challenge
# produces: [ application/json ]
# description: Retrieves tasks geographically closest to the specified task within the same Virtual Challenge
# responses:
#   '200':
#     description: The list of geographically closest tasks
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 5.
#   - name: proximity
#     in: query
#     description: Id of task around which geographically closest tasks are desired
###
GET     /virtualchallenge/:id/tasksNearby/:proximityId           @org.maproulette.controllers.api.VirtualChallengeController.getNearbyTasks(id:Long, proximityId:Long, limit:Int ?= 5)
###
# tags: [ Survey ]
# summary: Create a Survey
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create a new survey from the supplied JSON in the body. A survey is just a special
#               type of Challenge that includes a question with answers.
#               When creating a Survey object you can within the same json body include Task
#               children under the "children" key. When creating the Survey, leave the ID field
#               out of the body json, if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Survey with a unique id. The Survey object contains a challenge object
#                   however the Challenge object is flattened so the "general", "creation", "priority", and "extra"
#                   fields are remove and the keys from that object are moved into the challenge object.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '304':
#     description: Not updated responding with empty payload if Survey already exists and nothing to update
#   '400':
#     description: Invalid json payload for Survey
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Survey body, include the key "children" to create Task children objects.
#                   The survey object is just a special type of Challenge object, and is identical to the Challenge
#                   object other than including the "answers" key.
#                   Although the model schema for the Challenge shows a hierarchy include "general", "creation", "priority" and "extra" this
#                   JSON structure can be flattened and you can exclude those top level keys and have the children in the root level.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
###
POST    /survey                                     @org.maproulette.controllers.api.SurveyController.create
###
# tags: [ Survey ]
# summary: Create a batch of Surveys
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create multiple new Surveys from the JSONArray supplied in the body. Each JSON object
#               is basically a Survey object that is processed similarly to the singular /survey POST. If
#               surveys already exist with the name, they will simply be skipped, ie. not updated.
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Survey already exists and nothing to update
#   '400':
#     description: Invalid json payload for Survey
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Survey body, include the key "children" a Survey JSON object within the array to create Task children objects.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
###
POST    /surveys                                    @org.maproulette.controllers.api.SurveyController.batchUploadPost
###
# tags: [ Survey ]
# summary: Updates a Survey
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update an already existing Survey from the supplied JSON in the body.
#               When updating the Survey object you can within the same json body include Task
#               children under the "children" key.
# responses:
#   '200':
#     description: The updated JSON Survey
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
#   '304':
#     description: Not updated responding with empty payload if Survey already exists and nothing to update
#   '400':
#     description: Invalid json payload for Survey
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Survey that is being updated
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Survey body, include the key "children" to create or update Task children objects.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Challenge'
###
PUT     /survey/:id                                 @org.maproulette.controllers.api.SurveyController.update(id:Long)
###
# tags: [ Survey ]
# summary: Update a batch of Surveys
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update multiple already existing Surveys from the JSONArray supplied in the body. Each JSON object
#               is basically a Survey object that is processed similarly to the singular /survey POST. If a Survey
#               does not exist it will be created from scratch
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Survey already exists and nothing to update
#   '400':
#     description: Invalid json payload for Survey
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Survey body, include the key "children" in a Survey JSON object within the array to create Task children objects.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
###
PUT     /surveys                                    @org.maproulette.controllers.api.SurveyController.batchUploadPut
###
# tags: [ Survey ]
# summary: Retrieves random Task
# produces: [ application/json ]
# description: Retrieves a random Task based on the search criteria and contained within the current Survey
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: cid
#     in: query
#     description: The id of the parent Survey limiting the tasks to only a descendent of that Survey.
#   - name: tags
#     in: query
#     description: A comma separated list of task tags. The search will only retrieve random tasks that contain those tags
#   - name: s
#     in: query
#     description: The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /survey/:cid/tasks/random                   @org.maproulette.controllers.api.SurveyController.getRandomTasks(cid:Long, s:String ?= "", tags:String ?= "", limit:Int ?= 1, proximity:Long ?= -1)
###
# tags: [ Survey ]
# summary: Answers Survey Question
# consumes: [ application/json ]
# description: For a given task within the Survey will set the answerId to the answer for the question set by the Survey.
# responses:
#   '304':
#     description: No Content, just a successful answer to the Survey question
#   '400':
#     description: Invalid json payload for Task children. It is required that the body is a JSON array.
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Survey or No Task found that match the supplied ID's
# parameters:
#   - name: id
#     in: path
#     description: The id of the Survey that contains the question and answers
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: taskId
#     in: path
#     description: The id of the task that the answer relates too
#   - name: answerId
#     in: path
#     description: The id of the answer
#   - name: comment
#     in: query
#     description: Any comment associated with the answer to the survey question
###
PUT     /survey/:id/task/:taskId/:answerId          @org.maproulette.controllers.api.SurveyController.answerSurveyQuestion(id:Long, taskId:Long, answerId:Long, comment:String ?= "")
###
# tags: [ Task ]
# summary: Create a Task
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create a new Task from the supplied JSON in the body. When creating the Task, leave the ID field
#               out of the body json, if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Task with a unique id.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '304':
#     description: Not updated responding with empty payload if Survey already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Task body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
###
POST    /task                                       @org.maproulette.controllers.api.TaskController.create
###
# tags: [ Task ]
# summary: Create a batch of Tasks
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create multiple new Tasks from the JSONArray supplied in the body. Each JSON object
#               is basically a Task object that is processed similarly to the singular /sask POST. If
#               Tasks already exist with the name, they will simply be skipped, ie. not updated.
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Task body.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
###
POST    /tasks                                      @org.maproulette.controllers.api.TaskController.batchUploadPost
###
# tags: [ Task ]
# summary: Updates a Task
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update an already existing Task from the supplied JSON in the body.
# responses:
#   '200':
#     description: The updated JSON Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task that is being updated
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Task body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
###
PUT     /task/:id                                   @org.maproulette.controllers.api.TaskController.update(id:Long)
###
# tags: [ Task ]
# summary: Update a batch of Tasks
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update multiple already existing Tasks from the JSONArray supplied in the body. Each JSON object
#               is basically a Task object that is processed similarly to the singular /task POST. If a Task
#               does not exist it will be created from scratch
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Task body.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
###
PUT     /tasks                                      @org.maproulette.controllers.api.TaskController.batchUploadPut
###
# tags: [ Task ]
# summary: Retrieves an already existing Task
# produces: [ application/json ]
# description: Retrieves an already existing Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id                                   @org.maproulette.controllers.api.TaskController.read(id:Long)
###
# tags: [ Task ]
# summary: Start working on a Task (locks it for the user)
# produces: [ application/json ]
# description: Locks a Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The locked Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id/start                               @org.maproulette.controllers.api.TaskController.startOnTask(id:Long)
###
# tags: [ Task ]
# summary: Release a Task (unlocks it)
# produces: [ application/json ]
# description: Unlocks a Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The unlocked Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id/release                               @org.maproulette.controllers.api.TaskController.releaseTask(id:Long)
###
# tags: [ Task ]
# summary: Refresh an existing lock on a Task
# produces: [ application/json ]
# description: Refreshes an existing lock, extending its allowed duration, on the
#              task with the supplied ID. The requesting user must already own an
#              active lock on the task (i.e. via the task/:id/start API) or a 403
#              will be raised
# responses:
#   '200':
#     description: The lock was successfully refreshed
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '403':
#     description: The user does not own a lock on the task
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task on which the lock is to be refreshed
###
GET     /task/:id/refreshLock                           @org.maproulette.controllers.api.TaskController.refreshTaskLock(id:Long)
###
# tags: [ Task ]
# summary: Retrieves an already existing Task
# produces: [ application/json ]
# description: Retrieves an already existing Task based on the name of the Task rather than an ID
# responses:
#   '200':
#     description: The retrieved Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '404':
#     description: No Task found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge of the Task
#   - name: name
#     in: path
#     description: The name of the Task being retrieved
###
GET     /challenge/:id/task/:name                   @org.maproulette.controllers.api.TaskController.readByName(id:Long, name:String)
###
# tags: [ Task ]
# summary: Deletes an existing Task
# description: Deletes an existing Task based on the supplied ID.
# responses:
#   '200':
#     description: A status message containing the ID of the Task that was just deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Task found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task being deleted
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /task/:id                                   @org.maproulette.controllers.api.TaskController.delete(id:Long, immediate:Boolean ?= true)
###
# tags: [ Task ]
# summary: Find Task matching search criteria
# produces: [ application/json ]
# description: Finds a list of Tasks that match a specific search criteria. The search criteria is simply a string that is contained in the Task name. String case sensitivity is ignored.
# responses:
#   '200':
#     description: A list of Tasks found
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: q
#     in: query
#     description: The search string used to match the Task names. Default value is empty string, ie. will match everything.
#   - name: parentId
#     in: query
#     description: This limits the search to the provided challenge and no tasks outside of the provided challenge ID.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Flag to set if only want to see Tasks from enabled Challenges returned. Default value is true.
###
GET     /tasks/find                                 @org.maproulette.controllers.api.TaskController.find(q:String ?= "", parentId:Long ?= -1, limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
###
# tags: [ Task ]
# summary: Retrieve tags for Task
# produces: [ application/json ]
# description: Retrieves all the Tags that have been added to the specified Task
# responses:
#   '200':
#     description: A list of Tags associated with the Task. Empty array if not found.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
###
GET     /task/:id/tags                              @org.maproulette.controllers.api.TaskController.getTagsForTask(id:Long)
###
# tags: [ Task ]
# summary: Retrieve Tasks based on provided tags
# produces: [ application/json ]
# description: Retrieves all the Tasks that contain at least one of the supplied tags.
# responses:
#   '200':
#     description: A list of Tasks that contain at least one of the supplied tags. An empty list otherwise.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
# parameters:
#   - name: tags
#     in: query
#     description: A comma separated list of tags
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /tasks/tags                                 @org.maproulette.controllers.api.TaskController.getItemsBasedOnTags(tags:String ?= "", limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Task ]
# summary: Updates Task Tags
# description: Updates the tags on the Task
# responses:
#   '304':
#     description: A basic 304 with NoContent will be returned on a successful delete
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
#   - name: tags
#     in: query
#     description: A complete comma separated list of tags. If empty, then all tags will be removed.
#     required: true
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET  /task/:id/tags/update                              @org.maproulette.controllers.api.TaskController.updateItemTags(id:Long, tags:String ?= "")
###
# tags: [ Task ]
# summary: Delete Task Tags
# description: Deletes all the supplied tags from the Task
# responses:
#   '304':
#     description: A basic 304 with NoContent will be returned on a successful delete
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
#   - name: tags
#     in: query
#     description: A comma separated list of tags
#     required: true
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /task/:id/tags                              @org.maproulette.controllers.api.TaskController.deleteTagsFromItem(id:Long, tags:String ?= "")
###
# tags: [ Task ]
# summary: Retrieves random Task
# produces: [ application/json ]
# description: Retrieves a random Task based on the search criteria.
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: ps
#     in: query
#     description: The search string to match the names of projects to limit the Task pool from. The string is case insensitive.
#   - name: cs
#     in: query
#     description: The search string to match the names of challenges to limit the Task pool from. The string is case insensitive.
#   - name: ct
#     in: query
#     description: The challenge tags to limit the parent challenges that will limit the Task pool.
#   - name: tags
#     in: query
#     description: A comma separated list of task tags. The search will only retrieve random tasks that contain those tags
#   - name: ts
#     in: query
#     description: The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /tasks/random                               @org.maproulette.controllers.api.TaskController.getRandomTasks(ps:String ?= "", cs:String ?= "", ct:String ?= "", tags:String ?= "", ts:String ?= "", limit:Int ?= 1, proximity:Long ?= -1)
###
# tags: [ Task ]
# summary: Retrieves Tasks within a bounding box
# produces: [ application/json ]
# description: Retrieves tasks within a given bounding box.
# responses:
#   '200':
#     description: The list of clusteredPoints representing Tasks that match the search criteria within the bounding box.
#                  To specify a json body of a taskPropertySearch, use the PUT method.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.ClusteredPoint'
# parameters:
#   - name: left
#     in: path
#     description: The minimum latitude for the bounding box.
#   - name: bottom
#     in: path
#     description: The minimum longitude for the bounding box.
#   - name: right
#     in: path
#     description: The maximum latitude for the bounding box.
#   - name: top
#     in: path
#     description: The maximum longitude for the bounding box.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: includeGeometries
#     in: query
#     description: Optional flag to have geometries data returned for each task.
###
GET     /tasks/box/:left/:bottom/:right/:top        @org.maproulette.controllers.api.TaskController.getTasksInBoundingBox(left:Double, bottom:Double, right:Double, top:Double, limit:Int ?= 10000, page:Int ?= 0, excludeLocked:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", includeTotal:Boolean ?= false, includeGeometries:Boolean ?=false)
PUT     /tasks/box/:left/:bottom/:right/:top        @org.maproulette.controllers.api.TaskController.getTasksInBoundingBox(left:Double, bottom:Double, right:Double, top:Double, limit:Int ?= 10000, page:Int ?= 0, excludeLocked:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", includeTotal:Boolean ?= false, includeGeometries:Boolean ?=false)
###
# tags: [ Task ]
# summary: Update Task Changeset
# produces: [ application/json ]
# description: Will update the changeset of the task. It will do this by attempting to match the OSM changeset to the Task based on the geometry and the time that the changeset was executed.
# responses:
#   '200':
#     description: The task that was updated. With the updated changeset value
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: id
#     in: path
#     description: The ID of the task
###
PUT     /task/:id/changeset                         @org.maproulette.controllers.api.TaskController.matchToOSMChangeSet(id:Long)
###
# tags: [ Task ]
# summary: Update Task Status
# produces: [ application/json ]
# description: Will update a Tasks status to one of the following. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
# responses:
#   '304':
#     description: No Content, update successful
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: id
#     in: path
#     description: The ID of the task
#   - name: status
#     in: path
#     description: The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
#   - name: comment
#     in: query
#     description: Any comment that is provided by the user when setting the status
#   - name: requestReview
#     in: query
#     description: Boolean indicating if a review is requested on this task. (Will override user settings if provided)
#   - name: tags
#     in: query
#     description: Optional tags to associate with this task
#   - name: completionResponses
#     in: body
#     description: Optional key/value json to be stored with this task.
###
PUT     /task/:id/:status                           @org.maproulette.controllers.api.TaskController.setTaskStatus(id:Long, status:Int, comment:String ?= "", tags:String ?="")
###
# tags: [ Task ]
# summary: Update Bundle Task Status
# produces: [ application/json ]
# description: Will update a Bundled list of Tasks statuses to one of the following. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
# responses:
#   '200':
#     description: TaskBundle
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The bundle or primary task was not found with the supplied Id.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: bundleId
#     in: path
#     description: The ID of the bundle
#   - name: primaryId
#     in: path
#     description: The primary ID of the task for this bundle
#   - name: status
#     in: path
#     description: The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
#   - name: comment
#     in: query
#     description: Any comment that is provided by the user when setting the status
#   - name: requestReview
#     in: query
#     description: Boolean indicating if a review is requested on this task. (Will override user settings if provided)
#   - name: tags
#     description: Optional tags to associate with this task
###
PUT     /taskBundle/:bundleId/:status                           @org.maproulette.controllers.api.TaskController.setBundleTaskStatus(bundleId:Long, primaryId:Long, status:Int, comment:String ?= "", tags:String ?="")
###
# tags: [ Task ]
# summary: Update Task Review Status
# produces: [ application/json ]
# description: Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
# responses:
#   '200':
#     description: No Content, update successful
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: id
#     in: path
#     description: The ID of the task
#   - name: status
#     in: path
#     description: The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
#   - name: comment
#     in: query
#     description: Any comment that is provided by the user when setting the review status
#   - name: tags
#     description: Optional tags to associate with this task
###
PUT     /task/:id/review/:status                           @org.maproulette.controllers.api.TaskController.setTaskReviewStatus(id:Long, status:Int, comment:String ?= "", tags:String ?="")
###
# tags: [ Task ]
# summary: Update Task Review Status for a Bundle
# produces: [ application/json ]
# description: Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
# responses:
#   '200':
#     description: Task Bundle
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: id
#     in: path
#     description: The ID of the bundle
#   - name: status
#     in: path
#     description: The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
#   - name: comment
#     in: query
#     description: Any comment that is provided by the user when setting the review status
#   - name: tags
#     description: Optional tags to associate with this task
###
PUT     /taskBundle/:id/review/:status                     @org.maproulette.controllers.api.TaskController.setBundleTaskReviewStatus(id:Long, status:Int, comment:String ?= "", tags:String ?="")
###
# tags: [ Challenge ]
# summary: Retrieves task clusters
# produces: [ application/json ]
# description: Retrieves task clusters that contain the centroid location for a group of tasks
# responses:
#   '200':
#     description: An array of task clusters that represents clusters of tasks for a challenge. If none found will return an empty list.
#                  To specify a json body of a taskPropertySearch, use the PUT method.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.TaskCluster'
# parameters:
#   - name: points
#     in: query
#     description: The number of clusters that you want returned
###
GET     /taskCluster                                @org.maproulette.controllers.api.TaskController.getTaskClusters(points:Int ?= 100)
PUT     /taskCluster                                @org.maproulette.controllers.api.TaskController.getTaskClusters(points:Int ?= 100)
###
# tags: [ TaskReview ]
# summary: Retrieves task review clusters
# produces: [ application/json ]
# description: Retrieves task clusters that contain the centroid location for a group of review tasks
# responses:
#   '200':
#     description: An array of task clusters that represents clusters of tasks for the review criteria. If none found will return an empty list
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.TaskCluster'
# parameters:
#   - name: reviewTasksType
#     in: query
#     description: integer value > 1 - To Be Reviewed 2 - User's reviewed Tasks 3 - All reviewed by users
#   - name: points
#     in: query
#     description: The number of clusters that you want returned
#   - name: startDate
#     in: query
#     description: The start date to search within
#   - name: endDate
#     in: query
#     description: The end date to search within
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
###
GET     /taskCluster/review                                @org.maproulette.controllers.api.TaskReviewController.getReviewTaskClusters(reviewTasksType:Int, points:Int ?= 100, startDate: String ?= null, endDate: String ?= null, onlySaved:Boolean ?= false, excludeOtherReviewers:Boolean ?= false)
###
# tags: [ Challenge ]
# summary: Retrieves tasks in a cluster
# produces: [ application/json ]
# description: Retrieves tasks contained in a cluster retrieved from api /api/v2/challenge/:id/taskCluster
# responses:
#   '200':
#     description: An array of tasks that are contained in a cluster. If none found will return an empty list.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.ClusteredPoint'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: clusterId
#     in: path
#     description: The id of the single cluster.
#   - name: points
#     in: query
#     description: The number of clusters that you want returned
###
GET     /tasksInCluster/:clusterId                  @org.maproulette.controllers.api.TaskController.getTasksInCluster(clusterId:Int, points:Int ?= 100)
###
# tags: [ Comment ]
# summary: Retrieves a comment
# produces: [ application/json ]
# description: Retrieves a comment based on a specific ID.
# responses:
#   '200':
#     description: The comment
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Comment'
#   '404':
#     description: If the comment is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the comment
###
GET     /comment/:id                                @org.maproulette.controllers.api.TaskController.retrieveComment(id:Long)
###
# tags: [ Comment ]
# summary: Retrieves comments for a Task
# produces: [ application/json ]
# description: Retrieves all the comments for a specific Task
# responses:
#   '200':
#     description: The comments
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Comment'
#   '404':
#     description: If the Task is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the Task
###
GET     /task/:id/comments                          @org.maproulette.controllers.api.TaskController.retrieveComments(id:Long)
###
# tags: [ Comment ]
# summary: Adds comment to Task
# description: Adds a comment to a Task
# responses:
#   '201':
#     description: The comment that was added with the new ID
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Comment'
#   '404':
#     description: If the Task is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the Task
#   - name: comment
#     in: query
#     description: A URLEncoded comment for the Task
#   - name: actionId
#     in: query
#     description: An optional action ID that may be associated with the comment
###
POST    /task/:id/comment                           @org.maproulette.controllers.api.TaskController.addComment(id:Long, comment:String, actionId:Option[Long])
###
# tags: [ Comment ]
# summary: Adds comment to each Task in a Task Bundle
# description: Adds a comment to each Task in Bundle
# responses:
#   '201':
#     description: The task bundle
#   '404':
#     description: If the bundle is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the bundle
#   - name: comment
#     in: query
#     description: A URLEncoded comment for the Task
#   - name: actionId
#     in: query
#     description: An optional action ID that may be associated with the comment
###
POST    /taskBundle/:id/comment                     @org.maproulette.controllers.api.TaskController.addCommentToBundleTasks(id:Long, comment:String, actionId:Option[Long])
###
# tags: [ Comment ]
# summary: Update comment on Task
# description: Updates an existing comment on a Task. Only the original user who made the comment or a SuperUser can update the comment
# responses:
#   '200':
#     description: The comment that was added with the new ID
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Comment'
#   '401':
#     description: If the user is not the original user who made the comment or a super user
#   '404':
#     description: If the Task is not found
# parameters:
#   - name: commentId
#     in: path
#     description: The ID of the original comment
#   - name: comment
#     in: query
#     description: A URLEncoded comment for the Task
###
PUT    /comment/:commentId                          @org.maproulette.controllers.api.TaskController.updateComment(commentId:Long, comment:String)
###
# tags: [ Comment ]
# summary: Deletes comment from Task
# description: Deletes a comment from the specific Task
# responses:
#   '200':
#     description: The deletion was successful
#   '404':
#     description: If the Task or Comment is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the Task
#   - name: commentId
#     in: path
#     description: The ID for the Comment
###
DELETE  /task/:id/comment/:commentId                @org.maproulette.controllers.api.TaskController.deleteComment(id:Long, commentId:Long)
###
# tags: [ Keyword ]
# summary: Create a Keyword
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create a new Keyword from the supplied JSON in the body. When creating the Task, leave the ID field
#               out of the body json, if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Keyword with a unique id.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
#   '304':
#     description: Not updated responding with empty payload if Survey already exists and nothing to update
#   '400':
#     description: Invalid json payload for Keyword
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Keyword body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
###
POST    /keyword                                    @org.maproulette.controllers.api.TagController.create
###
# tags: [ Tag (Deprecated) ]
###
POST    /tag                                        @org.maproulette.controllers.api.TagController.create
###
# tags: [ Keyword ]
# summary: Create a batch of Keywords
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create multiple new Keyword from the JSONArray supplied in the body. Each JSON object
#               is basically a Keyword object that is processed similarly to the singular /keyword POST. If
#               Keywords already exist with the name, they will simply be skipped, ie. not updated.
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Keyword already exists and nothing to update
#   '400':
#     description: Invalid json payload for Keyword
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Keyword body.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
###
POST    /keywords                                   @org.maproulette.controllers.api.TagController.batchUploadPost
###
# tags: [ Tag (Deprecated) ]
###
POST    /tags                                       @org.maproulette.controllers.api.TagController.batchUploadPost
###
# tags: [ Keyword ]
# summary: Updates a Keyword
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update an already existing Keyword from the supplied JSON in the body.
# responses:
#   '200':
#     description: The updated JSON Keyword
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
#   '304':
#     description: Not updated responding with empty payload if Keyword already exists and nothing to update
#   '400':
#     description: Invalid json payload for Keyword
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Keyword that is being updated
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Keyword body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
###
PUT     /keyword/:id                                @org.maproulette.controllers.api.TagController.update(id:Long)
###
# tags: [ Tag (Deprecated) ]
###
PUT     /tag/:id                                    @org.maproulette.controllers.api.TagController.update(id:Long)
###
# tags: [ Keyword ]
# summary: Update a batch of Keywords
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update multiple already existing Keywords from the JSONArray supplied in the body. Each JSON object
#               is basically a Keyword object that is processed similarly to the singular /keyword POST. If a Keyword
#               does not exist it will be created from scratch
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Keyword already exists and nothing to update
#   '400':
#     description: Invalid json payload for Keyword
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Keyword body.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
###
PUT     /keywords                                   @org.maproulette.controllers.api.TagController.batchUploadPut
###
# tags: [ Tag (Deprecated) ]
###
PUT     /tags                                       @org.maproulette.controllers.api.TagController.batchUploadPut
###
# tags: [ Keyword ]
# summary: Retrieves an already existing Keyword
# produces: [ application/json ]
# description: Retrieves an already existing Keyword based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Keyword
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
#   '404':
#     description: ID field supplied but no Keyword found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Keyword to retrieve
###
GET     /keyword/:id                                @org.maproulette.controllers.api.TagController.read(id:Long)
###
# tags: [ Tag (Deprecated) ]
###
GET     /tag/:id                                    @org.maproulette.controllers.api.TagController.read(id:Long)
###
# tags: [ Keyword ]
# summary: Deletes an existing Keyword
# description: Deletes an existing Keyword based on the supplied ID.
# responses:
#   '200':
#     description: A status message containing the ID of the Keyword that was just deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Keyword found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the Keyword being deleted
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /keyword/:id                                @org.maproulette.controllers.api.TagController.delete(id:Long, immediate:Boolean ?= true)
###
# tags: [ Tag (Deprecated) ]
###
DELETE  /tag/:id                                    @org.maproulette.controllers.api.TagController.delete(id:Long, immediate:Boolean ?= true)
###
# tags: [ Keyword ]
# summary: Finds Keywords
# produces: [ application/json ]
# description: Retrieves existing Keywords based on a prefix for the Keyword. So if search for "tes" will retrieve all Keywords that start with "tes", like "tester", "testing", "test". The search string is case insensitive.
# responses:
#   '200':
#     description: The retrieved Keywords
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
# parameters:
#   - name: prefix
#     in: query
#     description: The prefix for the Keywords you are looking for
#   - name: tagType
#     in: query
#     description: Optional limit tags to a specific tagType ('challenges' or 'tasks')
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /keywords                                   @org.maproulette.controllers.api.TagController.getTags(prefix: String ?= "", tagType: String ?= "", limit: Int ?= 10, page: Int ?= 0)
###
# tags: [ Tag (Deprecated) ]
###
GET     /tags                                       @org.maproulette.controllers.api.TagController.getTags(prefix: String ?= "", tagType: String ?= "", limit: Int ?= 10, page: Int ?= 0)
### NoDocs ###
GET     /data/challenge/:challengeId                @org.maproulette.controllers.api.DataController.getChallengeSummary(challengeId:Long, survey:Int ?= -1, priority:String ?= "", includeByPriority:Boolean ?= false)
### NoDocs ###
GET     /data/challenge/:challengeId/users          @org.maproulette.controllers.api.DataController.getUserChallengeSummary(challengeId:Long, start:String ?= "", end:String ?= "", survey:Int ?= 0, priority:Int ?= -1)
###
# deprecated: true
###
POST    /data/challenge/summary                     @org.maproulette.controllers.api.DataController.getChallengeSummaries(projectList:String ?= "", priority:String ?= "", onlyEnabled:Boolean ?= true)
### NoDocs ###
GET     /data/user/activity                         @org.maproulette.controllers.api.DataController.getRecentUserActivity(limit:Int ?= -1, offset:Int ?= 0)
### NoDocs ###
GET     /data/user/summary                          @org.maproulette.controllers.api.DataController.getUserSummary(projectList:String ?= "", start:String ?= "", end:String ?= "", survey:Int ?= 0, priority:Int ?= -1)
### NoDocs ###
GET     /data/user/leaderboard                      @org.maproulette.controllers.api.DataController.getUserLeaderboard(userIds:String ?= "", projectIds:String ?= "", challengeIds:String ?= "", countryCodes:String ?= "", monthDuration:String ?= "", start:String ?= "", end:String ?= "", onlyEnabled:Boolean ?= true, limit:Int ?= 20, offset:Int ?= 0)
### NoDocs ###
GET     /data/user/:userId/leaderboard              @org.maproulette.controllers.api.DataController.getLeaderboardForUser(userId:Long, projectIds:String ?= "", challengeIds:String ?= "", countryCodes:String ?= "", monthDuration:String ?= "", start:String ?= "", end:String ?= "", onlyEnabled:Boolean ?= true, bracket:Int ?= 0)
### NoDocs ###
GET     /data/user/:userId/topChallenges            @org.maproulette.controllers.api.DataController.getUserTopChallenges(userId:Long, projectIds:String ?= "", challengeIds:String ?= "", countryCodes:String ?= "", monthDuration:String ?= "", start:String ?= "", end:String ?= "", onlyEnabled:Boolean ?= true, limit:Int ?= 20, offset:Int ?= 0)
### NoDocs ###
GET     /data/user/:userId/metrics                  @org.maproulette.controllers.api.UserController.getMetricsForUser(userId:Long, monthDuration:Int ?= -1, reviewDuration:Int ?= -1, reviewerDuration:Int ?= -1)
### NoDocs ###
GET     /data/project/activity                      @org.maproulette.controllers.api.DataController.getProjectActivity(projectList:String ?= "", start:String ?= "", end:String ?= "")
### NoDocs ###
GET     /data/project/summary                       @org.maproulette.controllers.api.DataController.getProjectSummary(projectList:String ?= "", onlyEnabled:Boolean ?= true, includeByPriority:Boolean ?= false)
### NoDocs ###
GET     /data/challenge/:challengeId/activity       @org.maproulette.controllers.api.DataController.getChallengeActivity(challengeId:Long, start:String ?= "", end:String ?= "", survey:Int ?= 0, priority:Int ?= -1)
### NoDocs ###
GET     /data/raw/activity                          @org.maproulette.controllers.api.DataController.getRawActivity(userIds:String ?= "", projectIds:String ?= "", challengeIds:String ?= "", start:String ?= "", end:String ?= "")
### NoDocs ###
GET     /data/status/activity                       @org.maproulette.controllers.api.DataController.getStatusActivity(userIds:String ?= "", projectIds:String ?= "", challengeIds:String ?= "", start:String ?= "", end:String ?= "", newStatus:String ?= "", oldStatus:String ?= "", limit:Int ?= 10, page:Int ?= 0)
### NoDocs ###
GET     /data/status/latestActivity                 @org.maproulette.controllers.api.DataController.getLatestChallengeActivity(projectIds:String ?= "", challengeIds:String ?= "", entries:Int ?= 1)
### NoDocs ###
GET     /data/status/summary                        @org.maproulette.controllers.api.DataController.getStatusSummary(userIds:String ?= "", projectIds:String ?= "", challengeIds:String ?= "", start:String ?= "", end:String ?= "", limit:Int ?= 10, page:Int ?= 0)
### NoDocs ###
GET     /data/challenge/:challengeId/propertyKeys   @org.maproulette.controllers.api.DataController.getPropertyKeys(challengeId:Long)
###
# tags: [ User ]
# summary: Retrieves current user's JSON information
# produces: [ application/json ]
# description: Retrieves current logged-in user's JSON
# responses:
#   '200':
#     description: The current logged-in User
#     schema:
#       $ref: '#/definitions/org.maproulette.session.User'
#   '401':
#     description: If user is not logged in.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET     /user/whoami                               @org.maproulette.controllers.api.UserController.whoami()
###
# tags: [ User ]
# summary: Retrieves Users Json information
# produces: [ application/json ]
# description: Retrieves User Json based on the supplied ID
# responses:
#   '200':
#     description: The retrieved User
#     schema:
#       $ref: '#/definitions/org.maproulette.session.User'
#   '404':
#     description: If User with provided ID is not found.
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to retrieve
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET     /user/:userId                               @org.maproulette.controllers.api.UserController.getUser(userId:Long)
###
# tags: [ User ]
# summary: Retrieves Users Json information
# produces: [ application/json ]
# description: Retrieves User Json based on the supplied OSM username
# responses:
#   '200':
#     description: The retrieved User
#     schema:
#       $ref: '#/definitions/org.maproulette.session.User'
#   '404':
#     description: If User with provided OSM username is not found.
# parameters:
#   - name: username
#     in: path
#     description: The OSM username of the user to retrieve
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET     /osmuser/:username                          @org.maproulette.controllers.api.UserController.getUserByOSMUsername(username:String)
###
# tags: [ User ]
# summary: Deletes a user from the database
# produces: [ application/json ]
# description: This will delete a user completely from the database. It can also optionally anonymize the users data from actions taken in MapRoulette, like change in status for tasks, comments on tasks and answers to survey questions
# responses:
#   '200':
#     description: An ok message stating the user was deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request, only super users can make this request
# parameters:
#   - name: osmId
#     in: path
#     description: The OSM id of the user you want to delete
#   - name: anonymize
#     in: query
#     description: Whether to anonymize the users data, false by default
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
###
# tags: [ User ]
# summary: Retrieves Users public Json information
# produces: [ application/json ]
# description: Retrieves User Json based on the supplied ID
# responses:
#   '200':
#     description: The retrieved User (with only basic info)
#     schema:
#       $ref: '#/definitions/org.maproulette.session.User'
#   '404':
#     description: If User with provided ID is not found.
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to retrieve
###
GET     /user/:userId/public                               @org.maproulette.controllers.api.UserController.getPublicUser(userId:Long)
###
# tags: [ User ]
# summary: Retrieves Users public Json information
# produces: [ application/json ]
# description: Retrieves User Json based on the supplied OSM username
# responses:
#   '200':
#     description: The retrieved User (with basic info)
#     schema:
#       $ref: '#/definitions/org.maproulette.session.User'
#   '404':
#     description: If User with provided OSM username is not found.
# parameters:
#   - name: username
#     in: path
#     description: The OSM username of the user to retrieve
###
GET     /osmuser/:username/public                          @org.maproulette.controllers.api.UserController.getPublicUserByOSMUsername(username:String)
###
# tags: [ User ]
# summary: Deletes a user from the database
# produces: [ application/json ]
# description: This will delete a user completely from the database. It can also optionally anonymize the users data from actions taken in MapRoulette, like change in status for tasks, comments on tasks and answers to survey questions
# responses:
#   '200':
#     description: An ok message stating the user was deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request, only super users can make this request
# parameters:
#   - name: osmId
#     in: path
#     description: The OSM id of the user you want to delete
#   - name: anonymize
#     in: query
#     description: Whether to anonymize the users data, false by default
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /user/:osmId                                @org.maproulette.controllers.api.UserController.deleteUser(osmId:Long, anonymize:Boolean ?= false)
###
# tags: [ User ]
# summary: Generates an API_KEY for a specified user
# produces: [ application/json ]
# description: This API will generate or regenerate the API_KEY for a specified user
# responses:
#   '200':
#     description: The retrieved User
#     schema:
#       $ref: '#/definitions/org.maproulette.session.User'
#   '401':
#     description: The user is not authorized to make this request, only super users or user matching the supplied ID can make this request
#   '404':
#     description: If User with provided ID is not found.
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to retrieve
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
PUT     /user/:userId/apikey                        @org.maproulette.controllers.api.UserController.generateAPIKey(userId:Long)
###
# tags: [ User ]
# summary: Search for users by OSM username
# produces: [ application/json ]
# description: Retrieves list of matching users
# responses:
#   '200':
#     description: The retrieved users
#     schema:
#       $ref: '#/definitions/org.maproulette.session.User'
# parameters:
#   - name: username
#     in: path
#     description: The OSM username or username fragment to search
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET     /users/find/:username                          @org.maproulette.controllers.api.UserController.searchUserByOSMUsername(username:String, limit:Int ?= 10)
###
# tags: [ User ]
# summary: Retrieves Users Saved Challenged
# produces: [ application/json ]
# description: Retrieves that list of challenges that has been saved by the User
# responses:
#   '200':
#     description: The retrieved Challenges
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Challenge'
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to retrieve the challenges for
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET     /user/:userId/saved                         @org.maproulette.controllers.api.UserController.getSavedChallenges(userId:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ User ]
# summary: Saves Challenge for a User
# description: Saves a Challenge to a user account
# responses:
#   '200':
#     description: A simple OK status message
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '404':
#     description: If User or Challenge for provided ID's is not found.
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to save the challenges for
#   - name: challengeId
#     in: path
#     description: The id of the challenge to save
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
POST    /user/:userId/save/:challengeId             @org.maproulette.controllers.api.UserController.saveChallenge(userId:Long, challengeId:Long)
###
# tags: [ User ]
# summary: Unsaves Challenge for a User
# description: Unsaves a Challenge to a user account
# responses:
#   '200':
#     description: A simple OK status message
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '404':
#     description: If User or Challenge for provided ID's is not found.
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to unsave the challenges for
#   - name: challengeId
#     in: path
#     description: The id of the challenge to unsave
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE   /user/:userId/unsave/:challengeId          @org.maproulette.controllers.api.UserController.unsaveChallenge(userId:Long, challengeId:Long)
###
# tags: [ User ]
# summary: Retrieves Users Saved Tasks
# produces: [ application/json ]
# description: Retrieves that list of tasks that has been saved by the User
# responses:
#   '200':
#     description: The retrieved Tasks
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to retrieve the challenges for
#   - name: challengeIds
#     in: query
#     description: A comma separated list of challenge Ids that you want to filter the tasks by
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET     /user/:userId/savedTasks                    @org.maproulette.controllers.api.UserController.getSavedTasks(userId:Long, challengeIds:String ?= "", limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ User ]
# summary: Saves a Task for a User
# description: Saves a Task to a user account
# responses:
#   '200':
#     description: A simple OK status message
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '404':
#     description: If User or Task for provided ID's is not found.
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to save the tasks for
#   - name: taskId
#     in: path
#     description: The id of the Task to save
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
POST    /user/:userId/saveTask/:taskId              @org.maproulette.controllers.api.UserController.saveTask(userId:Long, taskId:Long)
###
# tags: [ User ]
# summary: Unsaves Task for a User
# description: Unsaves a Task to a user account
# responses:
#   '200':
#     description: A simple OK status message
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '404':
#     description: If User or Task for provided ID's is not found.
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to unsave the tasks for
#   - name: taskId
#     in: path
#     description: The id of the task to unsave
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE   /user/:userId/unsaveTask/:taskId           @org.maproulette.controllers.api.UserController.unsaveTask(userId:Long, taskId:Long)
###
# tags: [ User ]
# summary: Updates UserSettings
# description: Updates the user settings for a specified user
# responses:
#   '200':
#     description: A response of the User object that was just updated
#     schema:
#       $ref: '#/definitions/org.maproulette.session.User'
#   '404':
#     description: If User or Challenge for provided ID's is not found.
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to update the settings for
#   - name: body
#     in: body
#     description: The JSON structure for the users UserSettings.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.session.UserSettings'
###
PUT    /user/:userId                                @org.maproulette.controllers.api.UserController.updateUser(userId:Long)
###
# tags: [ User ]
# summary: Retrieves Users notifications
# produces: [ application/json ]
# description: Retrieves notifications generated for the user
# responses:
#   '200':
#     description: The retrieved UserNotifications
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.UserNotification'
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to retrieve the notifications for
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: sort
#     in: query
#     description: Name of column to sort by
#   - name: order
#     in: query
#     description: sort order (ASC or DESC)
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET     /user/:userId/notifications                 @org.maproulette.controllers.api.NotificationController.getUserNotifications(userId:Long, limit:Int ?= 10, page:Int ?= 0, sort:String ?= "is_read", order:String ?= "ASC", notificationType:Option[Int], isRead:Option[Int], fromUsername:Option[String])
###
# tags: [ User ]
# summary: Mark user notifications as read
# produces: [ application/json ]
# description: Marks user notifications as read
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user that owns the notifications
#   - name: notificationIds
#     in: query
#     description: One or more comma-separated ids of notifications to mark as read
#     type: string,
#     required: true
###
PUT     /user/:userId/notifications                 @org.maproulette.controllers.api.NotificationController.markNotificationsRead(userId:Long, notificationIds:String)
###
# tags: [ User ]
# summary: Delete user notifications
# produces: [ application/json ]
# description: Deletes the specified user notifications
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user that owns the notifications
#   - name: notificationIds
#     in: query
#     description: One or more comma-separated ids of notifications to delete
#     type: string,
#     required: true
###
DELETE  /user/:userId/notifications                 @org.maproulette.controllers.api.NotificationController.deleteNotifications(userId:Long, notificationIds:String)
###
# tags: [ User ]
# summary: Retrieves Users notification subscriptions
# produces: [ application/json ]
# description: Retrieves the user's subscriptions to the various notification types
# responses:
#   '200':
#     description: The retrieved NotificationSubscriptions
#     schema:
#       type: object
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.session.User'
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to retrieve the subscriptions for
###
GET     /user/:userId/notificationSubscriptions     @org.maproulette.controllers.api.NotificationController.getNotificationSubscriptions(userId:Long)
###
# tags: [ User ]
# summary: Updates user's notification subscriptions
# produces: [ application/json ]
# description: Updates the user's subscriptions to various notification types
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to update the subscriptions for
#   - name: body
#     in: body
#     description: The JSON structure for the updated subscription settings
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.session.User'
###
PUT     /user/:userId/notificationSubscriptions     @org.maproulette.controllers.api.NotificationController.updateNotificationSubscriptions(userId:Long)
###
# tags: [ User ]
# summary: Refresh User Profile
# description: Refreshes the user profile from OSM
# responses:
#   '200':
#     description: Ok with no content
# parameters:
#   - name: userId
#     in: path
#     description: The osm id of the user to update the settings for
###
PUT     /user/:userId/refresh                        @org.maproulette.controllers.api.UserController.refreshProfile(userId:Long)
###
# tags: [ User ]
# summary: Gets a list of users managing project
# description: Gets list of users managing project along with their groupTypes (1 - Admin, 2 - Write, 3 - Read)
# responses:
#   '200':
#     description: The retrieved project managers
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.session.User'
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: projectId
#     in: path
#     description: The id of the project
###
GET     /user/project/:projectId                     @org.maproulette.controllers.api.UserController.getUsersManagingProject(projectId:Long, osmIds:String ?= "")
###
# tags: [ User ]
# summary: Add user to project group
# description: Adds a user with the specific ids to a Admin, Write or Read project group
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to add
#   - name: projectId
#     in: path
#     description: The id of the project to add the user too
#   - name: groupType
#     in: path
#     description: Either 1 - Admin, 2 - Write, 3 - Read
###
POST     /user/:userId/project/:projectId/:groupType  @org.maproulette.controllers.api.UserController.addUserToProject(userId:Long, projectId:Long, groupType:Int)
###
# tags: [ User ]
# summary: Set project group for user, removing any prior groups
# description: Sets a user with the specific ids to a Admin, Write or Read project group
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to add
#   - name: projectId
#     in: path
#     description: The id of the project to add the user too
#   - name: groupType
#     in: path
#     description: Either 1 - Admin, 2 - Write, 3 - Read
###
PUT     /user/:userId/project/:projectId/:groupType  @org.maproulette.controllers.api.UserController.setUserProjectGroup(userId:Long, projectId:Long, groupType:Int)
###
# tags: [ User ]
# summary: Adds a list of user to project group
# description: Adds a list of users with the specific ids to a Admin, Write or Read project group
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: projectId
#     in: path
#     description: The id of the project to add the user too
#   - name: groupType
#     in: path
#     description: Either 1 - Admin, 2 - Write, 3 - Read
#   - name: body
#     in: body
#     description: A JSON array of user ids. This can be either the MapRoulette or OSM Id.
#     required: true
#     schema:
#       type: array
#       items:
#         type: integer
###
PUT     /user/project/:projectId/:groupType         @org.maproulette.controllers.api.UserController.addUsersToProject(projectId:Long, groupType:Int)
###
# tags: [ User ]
# summary: Removes a user from a project group
# description: Removes a user with the specific id from a Admin, Write or Read project group
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: userId
#     in: path
#     description: The id of the user to add
#   - name: projectId
#     in: path
#     description: The id of the project to add the user too
#   - name: groupType
#     in: path
#     description: Either -1 all, 1 - Admin, 2 - Write, 3 - Read
###
DELETE  /user/:userId/project/:projectId/:groupType  @org.maproulette.controllers.api.UserController.removeUserFromProject(userId:Long, projectId:Long, groupType:Int)
###
# tags: [ User ]
# summary: Removes a list of users from a project group
# description: Removes a list of users with the specific id from a Admin, Write or Read project group
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: projectId
#     in: path
#     description: The id of the project to add the user too
#   - name: groupType
#     in: path
#     description: Either 1 - Admin, 2 - Write, 3 - Read
#   - name: body
#     in: body
#     description: A JSON array of user ids. This can be either the MapRoulette or OSM Id.
#     required: true
#     schema:
#       type: array
#       items:
#         type: integer
###
DELETE  /user/project/:projectId/:groupType         @org.maproulette.controllers.api.UserController.removeUsersFromProject(projectId:Long, groupType:Int)
###
# tags: [ Changes ]
# summary: Test Changes
# description: Takes in a group of changes and instead of submitting them to OSM will return a standard OSMChange XML that would have been submitted to the OSM servers
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: groupType
#     in: query
#     description: delta to return a delta version of the changes that would be applied. osmchange for the actual OSMChange value that would be applied to the OSM servers
#   - name: body
#     in: body
#     description: The tag changes
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.services.osm.ChangeObjects.TagChange'
###
POST    /change/tag/test                            @org.maproulette.controllers.OSMChangesetController.testTagChange(changeType:String ?= "delta")
###
# tags: [ Changes ]
# summary: Apply Tag Changes for task
# description: Submit a group of changes to OSM. Will return a standard OSMChange XML that has been applied to the OSM servers
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: taskId
#     in: query
#     description: The task id that should be marked as fixed after this tag change has been applied.
#   - name: comment
#     in: query
#     description: A task comment to be stored in map roulette with this change.
#   - name: requestReview
#     in: query
#     description: Boolean indicating if a review is requested on this task. (Will override user settings if provided)
#   - name: tags
#     in: query
#     description: A list of mrTags to be stored with the task
#   - name: body
#     in: body
#     description: The TagChangeSubmission
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.services.osm.ChangeObjects.TagChangeSubmission'
###
POST    /task/:taskId/fix/apply                     @org.maproulette.controllers.api.TaskController.applyTagFix(taskId:Long, comment:String ?= "", tags:String ?= "")

###
# tags: [ Bundle ]
# summary: Create a task bundle
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Create a new task bundle with the task ids in the supplied JSON body.
# responses:
#   '200':
#     description: The newly created bundle with a unique id.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.TaskBundle'
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the bundle body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.TaskBundle'
###
POST    /taskBundle                                 @org.maproulette.controllers.api.TaskController.createTaskBundle
### NoDocs ###
GET     /taskBundle/:id                             @org.maproulette.controllers.api.TaskController.getTaskBundle(id:Long)
### NoDocs ###
DELETE     /taskBundle/:id                          @org.maproulette.controllers.api.TaskController.deleteTaskBundle(id:Long, primaryId:Option[Long])
### NoDocs ###
GET        /taskBundle/:id/unbundle                 @org.maproulette.controllers.api.TaskController.unbundleTasks(id:Long, taskIds:List[Long])
### NoDocs ###
POST    /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
### NoDocs ###
PUT     /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
### NoDocs ###
GET     /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
### NoDocs ###
DELETE  /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
### NoDocs ###
HEAD    /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
