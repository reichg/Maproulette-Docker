# This is the main configuration file for the application.
# ~~~~~

# The application languages
# ~~~~~
application.langs="en,af,fr,es"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db {
  default {
    pool="hikaricp"
    driver="org.postgresql.Driver"
    url="jdbc:postgresql://localhost:5432/mr_prod"
    url=${?MR_DATABASE_URL}
    username="mrdbuser"
    password="mrdbpassword"
    hikaricp {
      connectionTestQuery="SELECT 1"
      hikaricp.maximumPoolSize=200
    }
  }
}
akka {
  actor {
    provider = "cluster"
  }
}
play {
  evolutions.db.default {
    autoCommit = false
    autoApply = true
    autoApplyDowns = false
  }
  server {
    netty.transport = "native"
    https {
      keyStore {
        # The path to the keystore
        path = ""
        path = ${?https.keyStore}
        # The type of the keystore
        type = "JKS"
        type = ${?https.keyStoreType}
        # The password for the keystore
        password = ""
        password = ${?https.keyStorePassword}
        # The algorithm to use. If not set, uses the platform default algorithm.
        algorithm = ${?https.keyStoreAlgorithm}
      }
      # HTTPS truststore configuration
      trustStore {
        # If true, does not do CA verification on client side certificates
        noCaVerification = false
      }
    }
  }
  # This is the max memory for post body data
  http {
    parser.maxDiskBuffer=15000K
    parser.maxMemoryBuffer=15000K
    filters="org.maproulette.filters.Filters"
    secret.key="%APPLICATION_SECRET%"
    secret.key=${?APPLICATION_SECRET}
    session.sameSite=null
    idleTimeout = 120s
  }
  MultipartFormData.maxLength=15000K
  modules.enabled += "org.maproulette.jobs.JobModule"
  filters {
    enabled += "play.filters.gzip.GzipFilter"
    gzip {
      whiteList = []
    }
    cors {
      // CORS filters options - see https://www.playframework.com/documentation/2.5.x/CorsFilter
      pathPrefixes = ["/"]
      allowedOrigins = null
      allowedHttpMethods = null
      allowedHttpHeaders = null
    }
  }
  ws {
    useragent="MapRoulette"
    #ssl {
    #  loose {
    #    allowWeakCiphers=true
    #    acceptAnyCertificate=true
    #    allowWeakProtocols = true
    #  }
    #  debug.ssl = true
    #}
  }
  # SMTP: see https://github.com/playframework/play-mailer/blob/master/README.md for options
  mailer {
    # host = "your.smtp.server.com"
    # user = "smtpusername"
    # password = "secret"
  }
}

# MapRoulette Settings
maproulette {
  version="2.1.0"
  action.level=1
  #session timeout in milliseconds, default -1 which ignores session timeouts
  session.timeout=-1
  # The protocol://hostname:port of server for use in absolute URLs generated for
  # links in CSV exports, email notifications, etc. E.G. https://myserver.org
  publicOrigin="https://maproulette.org"
  emailFrom="maproulette@example.com"

  # number of days till we reset the status if it has not been fixed
  task {
    reset = 14
    changesets {
      timeLimit="1 hour"
      enabled=false
    }
  }
  #logo="/assets/images/companylogo.png"
  signin=false
  debug=false
  devMode=false
  skipTooHard=false
  limits {
    challenges=3
    activities=10
    saved=5
  }
  super {
    # In general the super key should not be enabled, if it is any user with this key can access the system
    # as a super user and have full access to everything. Use with caution.
    key=""
    key=${?MR_SUPER_KEY}
    # This field will give super user access to any osm id that is in this comma seperated list automatically
    # on sign in. If the user has already signed in, the account will be updated in at least a day, or
    # the user can just click the refresh button to get it applied. Removing them from the list will remove
    # their access.
    accounts=""
    accounts=${?MR_SUPER_ACCOUNTS}
  }
  scheduler {
    cleanLocks.interval = "1 hour"
    cleanClaimLocks.interval = "1 hour"
    runChallengeSchedules.interval = "24 hours"
    updateLocations.interval = "2 hours"
    cleanOldTasks {
      interval = "24 hours"
      olderThan = "31 days"
      statusFilter = [0, 3]
    }
    osmMatcher {
      interval = "24 hours"
      batchSize = 5000
      enabled = false
      manual = false
    }
    cleanDeleted.interval = "24 hours"
    keepRight.interval = "7 days"
    challengesLeaderboard.interval = "20 minutes"
    countryLeaderboard {
      interval = "24 hours"
      startTime = "04:00:00"  # Run rebuild of Country Leaderboard at 4am local server time.
    }
    notifications {
      immediateEmail {
        interval = "1 minute"
        batchSize = 10 # Maximum number of emails to send per run/interval
      }

      digestEmail {
        startTime = "20:00:00" # 8pm local server time
        interval = "24 hours" # once daily
      }
    }
    userMetricsSnapshot {
      interval = "24 hours"
      startTime = "12:00:00" # Snapshot every day at midnight local time
    }
  }
  mapillary {
    host = "a.mapillary.com"
    clientId = ""
    border = 0.05
  }

  review {
    # Default value for 'needsReview' setting on users
    # 0 - does not need review
    # 1 - review needed (but user can selectively turn off)
    # 2 - review mandatory (review is always required)
    default = 0
  }
  caching {
    type="Basic"
    cacheLimt=10000
    cacheExpiry=900
    redis.resetOnStart=false
  }
}

include "keepright.conf"

osm {
  ql {
    provider="http://overpass-api.de/api/interpreter"
    timeout=120
  }
  # server="https://openstreetmap.org/"
  # server=${?MR_OSM_SERVER}
  #OSM OAuth Provider
  userDetails="/api/0.6/user/details"
  requestTokenURL="/oauth/request_token"
  accessTokenURL="/oauth/access_token"
  authorizationURL="/oauth/authorize"
  callbackURL=""
  # consumerKey=${MR_OAUTH_CONSUMER_KEY}
  # consumerSecret=${MR_OAUTH_CONSUMER_SECRET}
}

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
#logger.root=ERROR

# Logger used by the framework:
#logger.play=INFO

# Logger provided to your application:
#logger.application=DEBUG

api.version="2.0"

# Assets configuration
# ~~~~~
"assets.cache./public/AdminLTE/bootstrap.min.css"="max-age=0"
