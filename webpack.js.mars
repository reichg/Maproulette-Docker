/* eslint-disable @typescript-eslint/no-var-requires */
const path = require('path');
const precss = require('precss');
const autoprefixer = require('autoprefixer');
const CompressionPlugin = require('compression-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const WebpackShellPlugin = require('webpack-shell-plugin');
module.exports = {
    entry: './frontend/src/index.tsx',
    output: {
        path: path.resolve(__dirname, 'frontend/static/frontend'),
        filename: 'main.js',
        publicPath: '/',
    },
    plugins: [
        new CleanWebpackPlugin(),
        new CompressionPlugin({
            test: /\.js(\?.*)?$/i,
            cache: true,
        }),
        new WebpackShellPlugin({
            onBuildExit: [
                'echo collecting static',
                'python manage.py collectstatic --no-input --clear --verbosity 0',
            ],
        }),
    ],
    // Links errors back to original files
    devtool: 'eval-source-map',
    // cache: true,
    module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                include: path.resolve(__dirname, 'frontend'),
                exclude: /node_modules/,
                use: [
                    {
                        loader: 'babel-loader',
                        options: {
                            cacheDirectory: true,
                        },
                    },
                    'eslint-loader',
                ],
            },
            {
                test: /\.(ts|tsx)$/,
                exclude: /node_modules/,
                use: [
                    {
                        loader: 'awesome-typescript-loader',
                    },
                ],
            },
            {
                enforce: 'pre',
                test: /\.js%/,
                loader: 'source-map-loader',
            },
            {
                test: /\.s[ac]ss$/,
                include: path.resolve(__dirname, 'frontend/static/sass'),
                exclude: /node_modules/,
                use: [{
                    loader: 'style-loader', // inject CSS to page
                }, {
                    loader: 'css-loader', // translates CSS into CommonJS Modules
                    options: {
                        sourceMap: true,
                    },
                }, {
                    loader: 'postcss-loader', // run post CSS actions
                    options: {
                        plugins() {
                            return [
                                precss,
                                autoprefixer,
                            ];
                        },
                    },
                }, {
                    loader: 'sass-loader', // Compiles Sass to CSS
                    options: {
                        sourceMap: true,
                    },
                }],
            },
        ],
    },
    // externals: {
    //     // eslint-disable-next-line quote-props
    //     'react': 'React',
    //     'react-dom': 'ReactDOM',
    // },
    resolve: {
        extensions: ['.ts', '.tsx', '.js', '.jsx'],
    },
    watchOptions: {
        aggregateTimeout: 1000,
        poll: 1000,
        ignored: /node_modules/,
    },
    stats: {
        assets: false,
        builtAt: false,
        cached: false,
        cachedAssets: false,
        chunks: false,
        entrypoints: false,
        hash: false,
        version: false,
    },
};